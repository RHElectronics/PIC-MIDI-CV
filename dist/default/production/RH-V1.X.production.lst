

Microchip MPLAB XC8 Assembler V2.30 build 20200825195618 
                                                                                               Mon Mar 01 18:10:45 2021

Microchip MPLAB XC8 C Compiler v2.30 (Free license) build 20200825195618 Og1 
     1                           	processor	16F15323
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     6                           	psect	stringtext2,global,class=STRCODE,delta=2,noexec
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	intentry,global,class=CODE,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    22                           	dabs	1,0x7E,2
    23  0000                     
    24                           ; Version 2.30
    25                           ; Generated 26/08/2020 GMT
    26                           ; 
    27                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    28                           ; All rights reserved.
    29                           ; 
    30                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    31                           ; 
    32                           ; Redistribution and use in source and binary forms, with or without modification, are
    33                           ; permitted provided that the following conditions are met:
    34                           ; 
    35                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    36                           ;        conditions and the following disclaimer.
    37                           ; 
    38                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    39                           ;        of conditions and the following disclaimer in the documentation and/or other
    40                           ;        materials provided with the distribution. Publication is not required when
    41                           ;        this file is used in an embedded application.
    42                           ; 
    43                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    44                           ;        software without specific prior written permission.
    45                           ; 
    46                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    47                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    48                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    49                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    50                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    51                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    52                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    53                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    54                           ; 
    55                           ; 
    56                           ; Code-generator required, PIC16F15323 Definitions
    57                           ; 
    58                           ; SFR Addresses
    59  0000                     	;# 
    60  0001                     	;# 
    61  0002                     	;# 
    62  0003                     	;# 
    63  0004                     	;# 
    64  0005                     	;# 
    65  0006                     	;# 
    66  0007                     	;# 
    67  0008                     	;# 
    68  0009                     	;# 
    69  000A                     	;# 
    70  000B                     	;# 
    71  000C                     	;# 
    72  000E                     	;# 
    73  0012                     	;# 
    74  0014                     	;# 
    75  0018                     	;# 
    76  001A                     	;# 
    77  009B                     	;# 
    78  009B                     	;# 
    79  009C                     	;# 
    80  009D                     	;# 
    81  009E                     	;# 
    82  009F                     	;# 
    83  0119                     	;# 
    84  0119                     	;# 
    85  0119                     	;# 
    86  011A                     	;# 
    87  011A                     	;# 
    88  011A                     	;# 
    89  011B                     	;# 
    90  011B                     	;# 
    91  011B                     	;# 
    92  011B                     	;# 
    93  011B                     	;# 
    94  011C                     	;# 
    95  011C                     	;# 
    96  011C                     	;# 
    97  011D                     	;# 
    98  011D                     	;# 
    99  011D                     	;# 
   100  011E                     	;# 
   101  011E                     	;# 
   102  011E                     	;# 
   103  011F                     	;# 
   104  011F                     	;# 
   105  011F                     	;# 
   106  011F                     	;# 
   107  011F                     	;# 
   108  018C                     	;# 
   109  018D                     	;# 
   110  018E                     	;# 
   111  018F                     	;# 
   112  0190                     	;# 
   113  0191                     	;# 
   114  0192                     	;# 
   115  020C                     	;# 
   116  020C                     	;# 
   117  020D                     	;# 
   118  020E                     	;# 
   119  020F                     	;# 
   120  020F                     	;# 
   121  0210                     	;# 
   122  0210                     	;# 
   123  0211                     	;# 
   124  0211                     	;# 
   125  028C                     	;# 
   126  028C                     	;# 
   127  028D                     	;# 
   128  028D                     	;# 
   129  028E                     	;# 
   130  028F                     	;# 
   131  0290                     	;# 
   132  0291                     	;# 
   133  030C                     	;# 
   134  030C                     	;# 
   135  030D                     	;# 
   136  030E                     	;# 
   137  030F                     	;# 
   138  0310                     	;# 
   139  0310                     	;# 
   140  0311                     	;# 
   141  0312                     	;# 
   142  0313                     	;# 
   143  0314                     	;# 
   144  0314                     	;# 
   145  0315                     	;# 
   146  0316                     	;# 
   147  0318                     	;# 
   148  0318                     	;# 
   149  0319                     	;# 
   150  031A                     	;# 
   151  031C                     	;# 
   152  031C                     	;# 
   153  031D                     	;# 
   154  031E                     	;# 
   155  038C                     	;# 
   156  038C                     	;# 
   157  038D                     	;# 
   158  038E                     	;# 
   159  058C                     	;# 
   160  058C                     	;# 
   161  058D                     	;# 
   162  058E                     	;# 
   163  058F                     	;# 
   164  058F                     	;# 
   165  0590                     	;# 
   166  0591                     	;# 
   167  0592                     	;# 
   168  0593                     	;# 
   169  059C                     	;# 
   170  059C                     	;# 
   171  059D                     	;# 
   172  059D                     	;# 
   173  059E                     	;# 
   174  059F                     	;# 
   175  060C                     	;# 
   176  060D                     	;# 
   177  060E                     	;# 
   178  060F                     	;# 
   179  0610                     	;# 
   180  0611                     	;# 
   181  0612                     	;# 
   182  0613                     	;# 
   183  0614                     	;# 
   184  070C                     	;# 
   185  070D                     	;# 
   186  070E                     	;# 
   187  070F                     	;# 
   188  0710                     	;# 
   189  0711                     	;# 
   190  0712                     	;# 
   191  0713                     	;# 
   192  0716                     	;# 
   193  0717                     	;# 
   194  0718                     	;# 
   195  0719                     	;# 
   196  071A                     	;# 
   197  071B                     	;# 
   198  071C                     	;# 
   199  071D                     	;# 
   200  0796                     	;# 
   201  0797                     	;# 
   202  0798                     	;# 
   203  0799                     	;# 
   204  079A                     	;# 
   205  079B                     	;# 
   206  080C                     	;# 
   207  080D                     	;# 
   208  080E                     	;# 
   209  080F                     	;# 
   210  0810                     	;# 
   211  0811                     	;# 
   212  0812                     	;# 
   213  0813                     	;# 
   214  0814                     	;# 
   215  081A                     	;# 
   216  081A                     	;# 
   217  081B                     	;# 
   218  081C                     	;# 
   219  081C                     	;# 
   220  081D                     	;# 
   221  081E                     	;# 
   222  081F                     	;# 
   223  088C                     	;# 
   224  088D                     	;# 
   225  088E                     	;# 
   226  088F                     	;# 
   227  0890                     	;# 
   228  0891                     	;# 
   229  0892                     	;# 
   230  0893                     	;# 
   231  0895                     	;# 
   232  0896                     	;# 
   233  090C                     	;# 
   234  090E                     	;# 
   235  090F                     	;# 
   236  091F                     	;# 
   237  098F                     	;# 
   238  098F                     	;# 
   239  0990                     	;# 
   240  0991                     	;# 
   241  0992                     	;# 
   242  0993                     	;# 
   243  0994                     	;# 
   244  0995                     	;# 
   245  0996                     	;# 
   246  0997                     	;# 
   247  1E0F                     	;# 
   248  1E10                     	;# 
   249  1E11                     	;# 
   250  1E12                     	;# 
   251  1E13                     	;# 
   252  1E14                     	;# 
   253  1E15                     	;# 
   254  1E16                     	;# 
   255  1E17                     	;# 
   256  1E18                     	;# 
   257  1E19                     	;# 
   258  1E1A                     	;# 
   259  1E1B                     	;# 
   260  1E1C                     	;# 
   261  1E1D                     	;# 
   262  1E1E                     	;# 
   263  1E1F                     	;# 
   264  1E20                     	;# 
   265  1E21                     	;# 
   266  1E22                     	;# 
   267  1E23                     	;# 
   268  1E24                     	;# 
   269  1E25                     	;# 
   270  1E26                     	;# 
   271  1E27                     	;# 
   272  1E28                     	;# 
   273  1E29                     	;# 
   274  1E2A                     	;# 
   275  1E2B                     	;# 
   276  1E2C                     	;# 
   277  1E2D                     	;# 
   278  1E2E                     	;# 
   279  1E2F                     	;# 
   280  1E30                     	;# 
   281  1E31                     	;# 
   282  1E32                     	;# 
   283  1E33                     	;# 
   284  1E34                     	;# 
   285  1E35                     	;# 
   286  1E36                     	;# 
   287  1E37                     	;# 
   288  1E8F                     	;# 
   289  1E90                     	;# 
   290  1E91                     	;# 
   291  1E92                     	;# 
   292  1E93                     	;# 
   293  1E9C                     	;# 
   294  1EA1                     	;# 
   295  1EA2                     	;# 
   296  1EB1                     	;# 
   297  1EBB                     	;# 
   298  1EBC                     	;# 
   299  1EBD                     	;# 
   300  1EBE                     	;# 
   301  1EC3                     	;# 
   302  1EC5                     	;# 
   303  1EC6                     	;# 
   304  1EC7                     	;# 
   305  1ECB                     	;# 
   306  1ECC                     	;# 
   307  1F10                     	;# 
   308  1F11                     	;# 
   309  1F12                     	;# 
   310  1F13                     	;# 
   311  1F14                     	;# 
   312  1F15                     	;# 
   313  1F20                     	;# 
   314  1F21                     	;# 
   315  1F22                     	;# 
   316  1F23                     	;# 
   317  1F24                     	;# 
   318  1F25                     	;# 
   319  1F38                     	;# 
   320  1F39                     	;# 
   321  1F3A                     	;# 
   322  1F3B                     	;# 
   323  1F3C                     	;# 
   324  1F3D                     	;# 
   325  1F3E                     	;# 
   326  1F3F                     	;# 
   327  1F4E                     	;# 
   328  1F4F                     	;# 
   329  1F50                     	;# 
   330  1F51                     	;# 
   331  1F52                     	;# 
   332  1F53                     	;# 
   333  1F54                     	;# 
   334  1F55                     	;# 
   335  1FE4                     	;# 
   336  1FE5                     	;# 
   337  1FE6                     	;# 
   338  1FE7                     	;# 
   339  1FE8                     	;# 
   340  1FE8                     	;# 
   341  1FE9                     	;# 
   342  1FEA                     	;# 
   343  1FEA                     	;# 
   344  1FEB                     	;# 
   345  1FED                     	;# 
   346  1FEE                     	;# 
   347  1FEF                     	;# 
   348                           
   349                           	psect	idataBANK0
   350  02DE                     __pidataBANK0:
   351                           
   352                           ;initializer for _midiCh
   353  02DE  340F               	retlw	15
   354                           
   355                           ;initializer for _HighestNote
   356  02DF  3455               	retlw	85
   357                           
   358                           ;initializer for _LowestNote
   359  02E0  3418               	retlw	24
   360                           
   361                           ;initializer for _lastBend
   362  02E1  3440               	retlw	64
   363                           
   364                           ;initializer for _envtrig
   365  02E2  3401               	retlw	1
   366                           
   367                           ;initializer for _trigtime
   368  02E3  34FE               	retlw	254
   369                           
   370                           	psect	stringtext1
   371  016C                     __pstringtext1:
   372  016C                     _VCODAC:
   373  016C  3400               	retlw	0
   374  016D  3400               	retlw	0
   375  016E  3444               	retlw	68
   376  016F  3400               	retlw	0
   377  0170  3489               	retlw	137
   378  0171  3400               	retlw	0
   379  0172  34CD               	retlw	205
   380  0173  3400               	retlw	0
   381  0174  3411               	retlw	17
   382  0175  3401               	retlw	1
   383  0176  3455               	retlw	85
   384  0177  3401               	retlw	1
   385  0178  349A               	retlw	154
   386  0179  3401               	retlw	1
   387  017A  34DE               	retlw	222
   388  017B  3401               	retlw	1
   389  017C  3422               	retlw	34
   390  017D  3402               	retlw	2
   391  017E  3466               	retlw	102
   392  017F  3402               	retlw	2
   393  0180  34AB               	retlw	171
   394  0181  3402               	retlw	2
   395  0182  34EF               	retlw	239
   396  0183  3402               	retlw	2
   397  0184  3433               	retlw	51
   398  0185  3403               	retlw	3
   399  0186  3477               	retlw	119
   400  0187  3403               	retlw	3
   401  0188  34BC               	retlw	188
   402  0189  3403               	retlw	3
   403  018A  3400               	retlw	0
   404  018B  3404               	retlw	4
   405  018C  3444               	retlw	68
   406  018D  3404               	retlw	4
   407  018E  3489               	retlw	137
   408  018F  3404               	retlw	4
   409  0190  34CD               	retlw	205
   410  0191  3404               	retlw	4
   411  0192  3411               	retlw	17
   412  0193  3405               	retlw	5
   413  0194  3455               	retlw	85
   414  0195  3405               	retlw	5
   415  0196  349A               	retlw	154
   416  0197  3405               	retlw	5
   417  0198  34DE               	retlw	222
   418  0199  3405               	retlw	5
   419  019A  3422               	retlw	34
   420  019B  3406               	retlw	6
   421  019C  3466               	retlw	102
   422  019D  3406               	retlw	6
   423  019E  34AB               	retlw	171
   424  019F  3406               	retlw	6
   425  01A0  34EF               	retlw	239
   426  01A1  3406               	retlw	6
   427  01A2  3433               	retlw	51
   428  01A3  3407               	retlw	7
   429  01A4  3477               	retlw	119
   430  01A5  3407               	retlw	7
   431  01A6  34BC               	retlw	188
   432  01A7  3407               	retlw	7
   433  01A8  3400               	retlw	0
   434  01A9  3408               	retlw	8
   435  01AA  3444               	retlw	68
   436  01AB  3408               	retlw	8
   437  01AC  3489               	retlw	137
   438  01AD  3408               	retlw	8
   439  01AE  34CD               	retlw	205
   440  01AF  3408               	retlw	8
   441  01B0  3411               	retlw	17
   442  01B1  3409               	retlw	9
   443  01B2  3455               	retlw	85
   444  01B3  3409               	retlw	9
   445  01B4  349A               	retlw	154
   446  01B5  3409               	retlw	9
   447  01B6  34DE               	retlw	222
   448  01B7  3409               	retlw	9
   449  01B8  3422               	retlw	34
   450  01B9  340A               	retlw	10
   451  01BA  3466               	retlw	102
   452  01BB  340A               	retlw	10
   453  01BC  34AB               	retlw	171
   454  01BD  340A               	retlw	10
   455  01BE  34EF               	retlw	239
   456  01BF  340A               	retlw	10
   457  01C0  3433               	retlw	51
   458  01C1  340B               	retlw	11
   459  01C2  3477               	retlw	119
   460  01C3  340B               	retlw	11
   461  01C4  34BC               	retlw	188
   462  01C5  340B               	retlw	11
   463  01C6  3400               	retlw	0
   464  01C7  340C               	retlw	12
   465  01C8  3444               	retlw	68
   466  01C9  340C               	retlw	12
   467  01CA  3489               	retlw	137
   468  01CB  340C               	retlw	12
   469  01CC  34CD               	retlw	205
   470  01CD  340C               	retlw	12
   471  01CE  3411               	retlw	17
   472  01CF  340D               	retlw	13
   473  01D0  3455               	retlw	85
   474  01D1  340D               	retlw	13
   475  01D2  349A               	retlw	154
   476  01D3  340D               	retlw	13
   477  01D4  34DE               	retlw	222
   478  01D5  340D               	retlw	13
   479  01D6  3422               	retlw	34
   480  01D7  340E               	retlw	14
   481  01D8  3466               	retlw	102
   482  01D9  340E               	retlw	14
   483  01DA  34AB               	retlw	171
   484  01DB  340E               	retlw	14
   485  01DC  34EF               	retlw	239
   486  01DD  340E               	retlw	14
   487  01DE  3433               	retlw	51
   488  01DF  340F               	retlw	15
   489  01E0  3477               	retlw	119
   490  01E1  340F               	retlw	15
   491  01E2  34BC               	retlw	188
   492  01E3  340F               	retlw	15
   493  01E4  34FF               	retlw	255
   494  01E5  340F               	retlw	15
   495  01E6                     __end_of_VCODAC:
   496                           
   497                           	psect	stringtext2
   498  02EA                     __pstringtext2:
   499  02EA                     _oneVolt:
   500  02EA  3433               	retlw	51
   501  02EB  3403               	retlw	3
   502  02EC                     __end_of_oneVolt:
   503  001A                     _LATC	set	26
   504  0014                     _TRISC	set	20
   505  0012                     _TRISA	set	18
   506  0070                     _RC0	set	112
   507  0071                     _RC1	set	113
   508  0060                     _RA0	set	96
   509  0072                     _RC2	set	114
   510  0073                     _RC3	set	115
   511  005F                     _GIE	set	95
   512  005E                     _PEIE	set	94
   513  011B                     _SP1BRG	set	283
   514  0119                     _RCREG	set	281
   515  011F                     _BAUD1CONbits	set	287
   516  011E                     _TX1STA	set	286
   517  011D                     _RC1STA	set	285
   518  018F                     _SSP1STATbits	set	399
   519  018C                     _SSP1BUF	set	396
   520  0190                     _SSP1CON1	set	400
   521  0C7E                     _CKE	set	3198
   522  0C84                     _CKP	set	3204
   523  387D                     _RC1IF	set	14461
   524  38CD                     _RC1IE	set	14541
   525  0893                     _OSCFRQ	set	2195
   526  088D                     _OSCCON1	set	2189
   527  1EC6                     _SSP1DATPPS	set	7878
   528  1ECB                     _RX1DTPPS	set	7883
   529  1F24                     _RC4PPS	set	7972
   530  1F25                     _RC5PPS	set	7973
   531  1F14                     _RA4PPS	set	7956
   532  1F39                     _WPUA	set	7993
   533  1F4E                     _ANSELC	set	8014
   534  1F38                     _ANSELA	set	7992
   535                           
   536                           	psect	cinit
   537  0053                     start_initialization:	
   538                           ; #config settings
   539                           
   540  0053                     __initialization:
   541                           
   542                           ; Initialize objects allocated to BANK0
   543  0053  30DE               	movlw	low __pidataBANK0
   544  0054  0084               	movwf	4
   545  0055  3082               	movlw	(high __pidataBANK0)| (0+128)
   546  0056  0085               	movwf	5
   547  0057  0012               	moviw fsr0++
   548  0058  00B9               	movwf	__pdataBANK0& (0+127)
   549  0059  0012               	moviw fsr0++
   550  005A  00BA               	movwf	(__pdataBANK0+1)& (0+127)
   551  005B  0012               	moviw fsr0++
   552  005C  00BB               	movwf	(__pdataBANK0+2)& (0+127)
   553  005D  0012               	moviw fsr0++
   554  005E  00BC               	movwf	(__pdataBANK0+3)& (0+127)
   555  005F  0012               	moviw fsr0++
   556  0060  00BD               	movwf	(__pdataBANK0+4)& (0+127)
   557  0061  0012               	moviw fsr0++
   558  0062  00BE               	movwf	(__pdataBANK0+5)& (0+127)
   559                           
   560                           ; Clear objects allocated to COMMON
   561  0063  01FD               	clrf	__pbssCOMMON& (0+127)
   562                           
   563                           ; Clear objects allocated to BANK0
   564  0064  3020               	movlw	low __pbssBANK0
   565  0065  0084               	movwf	4
   566  0066  3000               	movlw	high __pbssBANK0
   567  0067  0085               	movwf	5
   568  0068  3012               	movlw	18
   569  0069  3182  22E4  3180   	fcall	clear_ram0
   570  006C                     end_of_initialization:	
   571                           ;End of C runtime variable initialization code
   572                           
   573  006C                     __end_of__initialization:
   574  006C  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
   575  006D  0140               	movlb	0
   576  006E  29E6               	ljmp	_main	;jump to C main() function
   577                           
   578                           	psect	bssCOMMON
   579  007D                     __pbssCOMMON:
   580  007D                     _midiByte:
   581  007D                     	ds	1
   582                           
   583                           	psect	bssBANK0
   584  0020                     __pbssBANK0:
   585  0020                     _tempBend:
   586  0020                     	ds	2
   587  0022                     _bendLvl:
   588  0022                     	ds	2
   589  0024                     _pitchBend:
   590  0024                     	ds	2
   591  0026                     _auxLevel:
   592  0026                     	ds	1
   593  0027                     _modLvl:
   594  0027                     	ds	1
   595  0028                     _trigenab:
   596  0028                     	ds	1
   597  0029                     _trigcount:
   598  0029                     	ds	1
   599  002A                     _lastNote:
   600  002A                     	ds	1
   601  002B                     _triggerNote:
   602  002B                     	ds	1
   603  002C                     _channel:
   604  002C                     	ds	1
   605  002D                     _status:
   606  002D                     	ds	1
   607  002E                     _midi_b:
   608  002E                     	ds	1
   609  002F                     _midi_a:
   610  002F                     	ds	1
   611  0030                     _thirdByte:
   612  0030                     	ds	1
   613  0031                     _runningStatus:
   614  0031                     	ds	1
   615                           
   616                           	psect	dataBANK0
   617  0039                     __pdataBANK0:
   618  0039                     _midiCh:
   619  0039                     	ds	1
   620  003A                     _HighestNote:
   621  003A                     	ds	1
   622  003B                     _LowestNote:
   623  003B                     	ds	1
   624  003C                     _lastBend:
   625  003C                     	ds	1
   626  003D                     _envtrig:
   627  003D                     	ds	1
   628  003E                     _trigtime:
   629  003E                     	ds	1
   630                           
   631                           	psect	clrtext
   632  02E4                     clear_ram0:	
   633                           ;	Called with FSR0 containing the base address, and
   634                           ;	WREG with the size to clear
   635                           
   636  02E4  0064               	clrwdt	;clear the watchdog before getting into this loop
   637  02E5                     clrloop0:
   638  02E5  0180               	clrf	0	;clear RAM location pointed to by FSR
   639  02E6  3101               	addfsr 0,1
   640  02E7  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   641  02E8  2AE5               	goto	clrloop0	;have we reached the end yet?
   642  02E9  3400               	retlw	0	;all done for this memory range, return
   643                           
   644                           	psect	cstackCOMMON
   645  0070                     __pcstackCOMMON:
   646  0070                     ?_NoteOff:
   647  0070                     ?_main:	
   648                           ; 1 bytes @ 0x0
   649                           
   650  0070                     ?_ISR:	
   651                           ; 1 bytes @ 0x0
   652                           
   653  0070                     ?_DAC8Write:	
   654                           ; 1 bytes @ 0x0
   655                           
   656  0070                     ?i1_DACWrite:	
   657                           ; 1 bytes @ 0x0
   658                           
   659  0070                     DAC8Write@data:	
   660                           ; 1 bytes @ 0x0
   661                           
   662  0070                     i1DACWrite@data:	
   663                           ; 1 bytes @ 0x0
   664                           
   665                           
   666                           ; 2 bytes @ 0x0
   667  0070                     	ds	1
   668  0071                     ??_DAC8Write:
   669                           
   670                           ; 1 bytes @ 0x1
   671  0071                     	ds	1
   672  0072                     ??i1_DACWrite:
   673                           
   674                           ; 1 bytes @ 0x2
   675  0072                     	ds	1
   676  0073                     DAC8Write@dac:
   677  0073                     i1DACWrite@dac:	
   678                           ; 1 bytes @ 0x3
   679                           
   680                           
   681                           ; 1 bytes @ 0x3
   682  0073                     	ds	1
   683  0074                     DAC8Write@dacLSB:
   684  0074                     i1DACWrite@dacLSB:	
   685                           ; 1 bytes @ 0x4
   686                           
   687                           
   688                           ; 1 bytes @ 0x4
   689  0074                     	ds	1
   690  0075                     DAC8Write@dacMSB:
   691  0075                     i1DACWrite@dacMSB:	
   692                           ; 1 bytes @ 0x5
   693                           
   694                           
   695                           ; 1 bytes @ 0x5
   696  0075                     	ds	1
   697  0076                     ?_handleMIDI:
   698  0076                     ??_NoteOff:	
   699                           ; 1 bytes @ 0x6
   700                           
   701  0076                     handleMIDI@midi_a:	
   702                           ; 1 bytes @ 0x6
   703                           
   704                           
   705                           ; 1 bytes @ 0x6
   706  0076                     	ds	1
   707  0077                     handleMIDI@midi_b:
   708                           
   709                           ; 1 bytes @ 0x7
   710  0077                     	ds	1
   711  0078                     ??_handleMIDI:
   712                           
   713                           ; 1 bytes @ 0x8
   714  0078                     	ds	2
   715  007A                     handleMIDI@midiByte:
   716                           
   717                           ; 1 bytes @ 0xA
   718  007A                     	ds	1
   719  007B                     ??_ISR:
   720                           
   721                           ; 1 bytes @ 0xB
   722  007B                     	ds	2
   723                           
   724                           	psect	cstackBANK0
   725  0032                     __pcstackBANK0:
   726  0032                     ?_DACWrite:
   727  0032                     DACWrite@data:	
   728                           ; 1 bytes @ 0x0
   729                           
   730                           
   731                           ; 2 bytes @ 0x0
   732  0032                     	ds	2
   733  0034                     ??_DACWrite:
   734                           
   735                           ; 1 bytes @ 0x2
   736  0034                     	ds	1
   737  0035                     DACWrite@dac:
   738                           
   739                           ; 1 bytes @ 0x3
   740  0035                     	ds	1
   741  0036                     DACWrite@dacLSB:
   742                           
   743                           ; 1 bytes @ 0x4
   744  0036                     	ds	1
   745  0037                     DACWrite@dacMSB:
   746                           
   747                           ; 1 bytes @ 0x5
   748  0037                     	ds	1
   749  0038                     ??_main:
   750                           
   751                           ; 1 bytes @ 0x6
   752  0038                     	ds	1
   753                           
   754                           	psect	maintext
   755  01E6                     __pmaintext:	
   756 ;;
   757 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   758 ;;
   759 ;; *************** function _main *****************
   760 ;; Defined at:
   761 ;;		line 67 in file "rhv1.c"
   762 ;; Parameters:    Size  Location     Type
   763 ;;		None
   764 ;; Auto vars:     Size  Location     Type
   765 ;;		None
   766 ;; Return value:  Size  Location     Type
   767 ;;                  1    wreg      void 
   768 ;; Registers used:
   769 ;;		wreg, status,2, status,0, pclath, cstack
   770 ;; Tracked objects:
   771 ;;		On entry : B3F/0
   772 ;;		On exit  : 0/0
   773 ;;		Unchanged: 0/0
   774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   775 ;;      Params:         0       0       0       0
   776 ;;      Locals:         0       0       0       0
   777 ;;      Temps:          0       1       0       0
   778 ;;      Totals:         0       1       0       0
   779 ;;Total ram usage:        1 bytes
   780 ;; Hardware stack levels required when called:    5
   781 ;; This function calls:
   782 ;;		_DACWrite
   783 ;; This function is called by:
   784 ;;		Startup code after reset
   785 ;; This function uses a non-reentrant model
   786 ;;
   787                           
   788                           
   789                           ;psect for function _main
   790  01E6                     _main:
   791  01E6                     l1151:	
   792                           ;incstack = 0
   793                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   794                           
   795                           
   796                           ;rhv1.c: 69:     OSCCON1 = 0b01100000;
   797  01E6  3060               	movlw	96
   798  01E7  0151               	movlb	17	; select bank17
   799  01E8  008D               	movwf	13	;volatile
   800                           
   801                           ;rhv1.c: 70:     OSCFRQ = 0b00000010;
   802  01E9  3002               	movlw	2
   803  01EA  0093               	movwf	19	;volatile
   804  01EB                     l1153:
   805                           
   806                           ;rhv1.c: 72:     ANSELA = 0;
   807  01EB  017E               	movlb	62	; select bank62
   808  01EC  01B8               	clrf	56	;volatile
   809  01ED                     l1155:
   810                           
   811                           ;rhv1.c: 73:     ANSELC = 0;
   812  01ED  01CE               	clrf	78	;volatile
   813                           
   814                           ;rhv1.c: 74:     TRISA = 0b00110111;
   815  01EE  3037               	movlw	55
   816  01EF  0140               	movlb	0	; select bank0
   817  01F0  0092               	movwf	18	;volatile
   818  01F1                     l1157:
   819                           
   820                           ;rhv1.c: 75:     TRISC = 0;
   821  01F1  0194               	clrf	20	;volatile
   822  01F2                     l1159:
   823                           
   824                           ;rhv1.c: 76:     WPUA = 0b00000001;
   825  01F2  3001               	movlw	1
   826  01F3  017E               	movlb	62	; select bank62
   827  01F4  00B9               	movwf	57	;volatile
   828  01F5                     l1161:
   829                           
   830                           ;rhv1.c: 79:     RX1DTPPS = 0x05;
   831  01F5  3005               	movlw	5
   832  01F6  017D               	movlb	61	; select bank61
   833  01F7  00CB               	movwf	75	;volatile
   834  01F8                     l1163:
   835                           
   836                           ;rhv1.c: 80:     RA4PPS = 0x0F;
   837  01F8  300F               	movlw	15
   838  01F9  017E               	movlb	62	; select bank62
   839  01FA  0094               	movwf	20	;volatile
   840  01FB                     l1165:
   841                           
   842                           ;rhv1.c: 82:     SSP1DATPPS = 0x02;
   843  01FB  3002               	movlw	2
   844  01FC  017D               	movlb	61	; select bank61
   845  01FD  00C6               	movwf	70	;volatile
   846  01FE                     l1167:
   847                           
   848                           ;rhv1.c: 83:     RC5PPS = 0x15;
   849  01FE  3015               	movlw	21
   850  01FF  017E               	movlb	62	; select bank62
   851  0200  00A5               	movwf	37	;volatile
   852  0201                     l1169:
   853                           
   854                           ;rhv1.c: 84:     RC4PPS = 0x16;
   855  0201  3016               	movlw	22
   856  0202  00A4               	movwf	36	;volatile
   857  0203                     l1171:
   858                           
   859                           ;rhv1.c: 87:     RC1STA = 0b10010000;
   860  0203  3090               	movlw	144
   861  0204  0142               	movlb	2	; select bank2
   862  0205  009D               	movwf	29	;volatile
   863  0206                     l1173:
   864                           
   865                           ;rhv1.c: 88:     TX1STA = 0b00100100;
   866  0206  3024               	movlw	36
   867  0207  009E               	movwf	30	;volatile
   868  0208                     l1175:
   869                           
   870                           ;rhv1.c: 89:     BAUD1CONbits.BRG16 = 1;
   871  0208  159F               	bsf	31,3	;volatile
   872  0209                     l1177:
   873                           
   874                           ;rhv1.c: 90:     SP1BRG = 31;
   875  0209  3000               	movlw	0
   876  020A  009C               	movwf	28	;volatile
   877  020B  301F               	movlw	31
   878  020C  009B               	movwf	27	;volatile
   879  020D                     l1179:
   880                           
   881                           ;rhv1.c: 93:     SSP1CON1 = 0b00100000;
   882  020D  3020               	movlw	32
   883  020E  0143               	movlb	3	; select bank3
   884  020F  0090               	movwf	16	;volatile
   885  0210                     l1181:
   886                           
   887                           ;rhv1.c: 94:     CKP = 0;
   888  0210  1210               	bcf	16,4	;volatile
   889  0211                     l1183:
   890                           
   891                           ;rhv1.c: 95:     CKE = 1;
   892  0211  170F               	bsf	15,6	;volatile
   893  0212                     l1185:
   894                           
   895                           ;rhv1.c: 98:     RC1IE = 1;
   896  0212  014E               	movlb	14	; select bank14
   897  0213  1699               	bsf	25,5	;volatile
   898  0214                     l1187:
   899                           
   900                           ;rhv1.c: 99:     PEIE = 1;
   901  0214  170B               	bsf	11,6	;volatile
   902  0215                     l1189:
   903                           
   904                           ;rhv1.c: 100:     GIE = 1;
   905  0215  178B               	bsf	11,7	;volatile
   906  0216                     l1191:
   907                           
   908                           ;rhv1.c: 102:     RC3 = 1;
   909  0216  0140               	movlb	0	; select bank0
   910  0217  158E               	bsf	14,3	;volatile
   911  0218                     l1193:
   912                           
   913                           ;rhv1.c: 103:     RC2 = 1;
   914  0218  150E               	bsf	14,2	;volatile
   915  0219                     l1195:
   916                           
   917                           ;rhv1.c: 105:     DACWrite(0,0);
   918  0219  3000               	movlw	0
   919  021A  00B2               	movwf	DACWrite@data
   920  021B  00B3               	movwf	DACWrite@data+1
   921  021C  3000               	movlw	0
   922  021D  3182  227F  3181   	fcall	_DACWrite
   923  0220                     l1197:
   924                           
   925                           ;rhv1.c: 106:     DACWrite(1,oneVolt);
   926  0220  3033               	movlw	51
   927  0221  0140               	movlb	0	; select bank0
   928  0222  00B2               	movwf	DACWrite@data
   929  0223  3003               	movlw	3
   930  0224  00B3               	movwf	DACWrite@data+1
   931  0225  3001               	movlw	1
   932  0226  3182  227F  3181   	fcall	_DACWrite
   933  0229                     l1199:
   934                           
   935                           ;rhv1.c: 110:         if(RA0 == 0){midiCh = 15;}
   936  0229  0140               	movlb	0	; select bank0
   937  022A  180C               	btfsc	12,0	;volatile
   938  022B  2A2D               	goto	u801
   939  022C  2A2E               	goto	u800
   940  022D                     u801:
   941  022D  2A33               	goto	l1203
   942  022E                     u800:
   943  022E                     l1201:
   944  022E  300F               	movlw	15
   945  022F  00B8               	movwf	??_main
   946  0230  0838               	movf	??_main,w
   947  0231  00B9               	movwf	_midiCh
   948  0232  2A37               	goto	l1205
   949  0233                     l1203:
   950  0233  300E               	movlw	14
   951  0234  00B8               	movwf	??_main
   952  0235  0838               	movf	??_main,w
   953  0236  00B9               	movwf	_midiCh
   954  0237                     l1205:
   955                           
   956                           ;rhv1.c: 113:         if(trigenab == 1) {
   957  0237  0328               	decf	_trigenab,w
   958  0238  1D03               	btfss	3,2
   959  0239  2A3B               	goto	u811
   960  023A  2A3C               	goto	u810
   961  023B                     u811:
   962  023B  2A29               	goto	l1199
   963  023C                     u810:
   964  023C                     l1207:
   965                           
   966                           ;rhv1.c: 114:             trigcount ++;
   967  023C  3001               	movlw	1
   968  023D  00B8               	movwf	??_main
   969  023E  0838               	movf	??_main,w
   970  023F  07A9               	addwf	_trigcount,f
   971  0240                     l1209:
   972                           
   973                           ;rhv1.c: 115:             if(trigcount >= trigtime){
   974  0240  30FE               	movlw	254
   975  0241  0229               	subwf	_trigcount,w
   976  0242  1C03               	skipc
   977  0243  2A45               	goto	u821
   978  0244  2A46               	goto	u820
   979  0245                     u821:
   980  0245  2A29               	goto	l1199
   981  0246                     u820:
   982  0246                     l1211:
   983                           
   984                           ;rhv1.c: 116:                 trigcount = 0;
   985  0246  01A9               	clrf	_trigcount
   986                           
   987                           ;rhv1.c: 117:                 trigenab = 0;
   988  0247  01A8               	clrf	_trigenab
   989  0248                     l1213:
   990                           
   991                           ;rhv1.c: 118:                 RC1 = 0;
   992  0248  108E               	bcf	14,1	;volatile
   993  0249  2A29               	goto	l1199
   994  024A  2852               	ljmp	start
   995  024B                     __end_of_main:
   996                           
   997                           	psect	text1
   998  027F                     __ptext1:	
   999 ;; *************** function _DACWrite *****************
  1000 ;; Defined at:
  1001 ;;		line 161 in file "rhv1.c"
  1002 ;; Parameters:    Size  Location     Type
  1003 ;;  dac             1    wreg     unsigned char 
  1004 ;;  data            2    0[BANK0 ] unsigned int 
  1005 ;; Auto vars:     Size  Location     Type
  1006 ;;  dac             1    3[BANK0 ] unsigned char 
  1007 ;;  dacMSB          1    5[BANK0 ] unsigned char 
  1008 ;;  dacLSB          1    4[BANK0 ] unsigned char 
  1009 ;; Return value:  Size  Location     Type
  1010 ;;                  1    wreg      void 
  1011 ;; Registers used:
  1012 ;;		wreg, status,2, status,0
  1013 ;; Tracked objects:
  1014 ;;		On entry : 0/0
  1015 ;;		On exit  : 0/0
  1016 ;;		Unchanged: 0/0
  1017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1018 ;;      Params:         0       2       0       0
  1019 ;;      Locals:         0       3       0       0
  1020 ;;      Temps:          0       1       0       0
  1021 ;;      Totals:         0       6       0       0
  1022 ;;Total ram usage:        6 bytes
  1023 ;; Hardware stack levels used:    1
  1024 ;; Hardware stack levels required when called:    4
  1025 ;; This function calls:
  1026 ;;		Nothing
  1027 ;; This function is called by:
  1028 ;;		_main
  1029 ;; This function uses a non-reentrant model
  1030 ;;
  1031                           
  1032                           
  1033                           ;psect for function _DACWrite
  1034  027F                     _DACWrite:
  1035                           
  1036                           ;incstack = 0
  1037                           ; Regs used in _DACWrite: [wreg+status,2+status,0]
  1038                           ;DACWrite@dac stored from wreg
  1039  027F  0140               	movlb	0	; select bank0
  1040  0280  00B5               	movwf	DACWrite@dac
  1041  0281                     l1027:
  1042                           
  1043                           ;rhv1.c: 164:     unsigned char dacLSB = 0;
  1044  0281  01B6               	clrf	DACWrite@dacLSB
  1045  0282                     l1029:
  1046                           
  1047                           ;rhv1.c: 165:     dacMSB = (data >> 8) & 0xFF;
  1048  0282  0833               	movf	DACWrite@data+1,w
  1049  0283  00B4               	movwf	??_DACWrite
  1050  0284  0834               	movf	??_DACWrite,w
  1051  0285  00B7               	movwf	DACWrite@dacMSB
  1052  0286                     l1031:
  1053                           
  1054                           ;rhv1.c: 167:     if(dac == 1){ dacMSB |= 0x80;}
  1055  0286  0335               	decf	DACWrite@dac,w
  1056  0287  1D03               	btfss	3,2
  1057  0288  2A8A               	goto	u541
  1058  0289  2A8B               	goto	u540
  1059  028A                     u541:
  1060  028A  2A8C               	goto	l1035
  1061  028B                     u540:
  1062  028B                     l1033:
  1063  028B  17B7               	bsf	DACWrite@dacMSB,7
  1064  028C                     l1035:
  1065                           
  1066                           ;rhv1.c: 169:     dacMSB |= 0b01110000;
  1067  028C  3070               	movlw	112
  1068  028D  00B4               	movwf	??_DACWrite
  1069  028E  0834               	movf	??_DACWrite,w
  1070  028F  04B7               	iorwf	DACWrite@dacMSB,f
  1071  0290                     l1037:
  1072                           
  1073                           ;rhv1.c: 170:     dacLSB = (data & 0xFF);
  1074  0290  0832               	movf	DACWrite@data,w
  1075  0291  00B4               	movwf	??_DACWrite
  1076  0292  0834               	movf	??_DACWrite,w
  1077  0293  00B6               	movwf	DACWrite@dacLSB
  1078  0294                     l1039:
  1079                           
  1080                           ;rhv1.c: 172:     RC3 = 0;
  1081  0294  118E               	bcf	14,3	;volatile
  1082  0295                     l1041:
  1083                           
  1084                           ;rhv1.c: 174:     SSP1BUF = dacMSB;
  1085  0295  0837               	movf	DACWrite@dacMSB,w
  1086  0296  0143               	movlb	3	; select bank3
  1087  0297  008C               	movwf	12	;volatile
  1088  0298                     l147:	
  1089                           ;rhv1.c: 175:     while(!SSP1STATbits.BF);
  1090                           
  1091  0298  1C0F               	btfss	15,0	;volatile
  1092  0299  2A9B               	goto	u551
  1093  029A  2A9C               	goto	u550
  1094  029B                     u551:
  1095  029B  2A98               	goto	l147
  1096  029C                     u550:
  1097  029C                     l1043:
  1098                           
  1099                           ;rhv1.c: 176:     SSP1BUF = dacLSB;
  1100  029C  0140               	movlb	0	; select bank0
  1101  029D  0836               	movf	DACWrite@dacLSB,w
  1102  029E  0143               	movlb	3	; select bank3
  1103  029F  008C               	movwf	12	;volatile
  1104  02A0                     l150:	
  1105                           ;rhv1.c: 177:     while(!SSP1STATbits.BF);
  1106                           
  1107  02A0  1C0F               	btfss	15,0	;volatile
  1108  02A1  2AA3               	goto	u561
  1109  02A2  2AA4               	goto	u560
  1110  02A3                     u561:
  1111  02A3  2AA0               	goto	l150
  1112  02A4                     u560:
  1113  02A4                     l152:
  1114                           
  1115                           ;rhv1.c: 179:     RC3 = 1;
  1116  02A4  0140               	movlb	0	; select bank0
  1117  02A5  158E               	bsf	14,3	;volatile
  1118  02A6                     l153:	
  1119                           ;rhv1.c: 180:     return;
  1120                           
  1121  02A6  0008               	return
  1122  02A7                     __end_of_DACWrite:
  1123                           
  1124                           	psect	intentry
  1125  0004                     __pintentry:	
  1126 ;; *************** function _ISR *****************
  1127 ;; Defined at:
  1128 ;;		line 124 in file "rhv1.c"
  1129 ;; Parameters:    Size  Location     Type
  1130 ;;		None
  1131 ;; Auto vars:     Size  Location     Type
  1132 ;;		None
  1133 ;; Return value:  Size  Location     Type
  1134 ;;                  1    wreg      void 
  1135 ;; Registers used:
  1136 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1137 ;; Tracked objects:
  1138 ;;		On entry : 0/0
  1139 ;;		On exit  : 0/0
  1140 ;;		Unchanged: 0/0
  1141 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1142 ;;      Params:         0       0       0       0
  1143 ;;      Locals:         0       0       0       0
  1144 ;;      Temps:          2       0       0       0
  1145 ;;      Totals:         2       0       0       0
  1146 ;;Total ram usage:        2 bytes
  1147 ;; Hardware stack levels used:    1
  1148 ;; Hardware stack levels required when called:    3
  1149 ;; This function calls:
  1150 ;;		_handleMIDI
  1151 ;; This function is called by:
  1152 ;;		Interrupt level 1
  1153 ;; This function uses a non-reentrant model
  1154 ;;
  1155                           
  1156  0004                     _ISR:
  1157                           
  1158                           ;incstack = 0
  1159  0004  147E               	bsf	int$flags,0	;set compiler interrupt flag (level 1)
  1160                           
  1161                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1162  0005  3180               	pagesel	$
  1163  0006                     i1l1215:
  1164                           
  1165                           ;rhv1.c: 127:     if (RC1IF == 1) {
  1166  0006  014E               	movlb	14	; select bank14
  1167  0007  1E8F               	btfss	15,5	;volatile
  1168  0008  280A               	goto	u83_21
  1169  0009  280B               	goto	u83_20
  1170  000A                     u83_21:
  1171  000A  2850               	goto	i1l137
  1172  000B                     u83_20:
  1173  000B                     i1l1217:
  1174                           
  1175                           ;rhv1.c: 128:         midiByte = RCREG;
  1176  000B  0142               	movlb	2	; select bank2
  1177  000C  0819               	movf	25,w	;volatile
  1178  000D  00FB               	movwf	??_ISR
  1179  000E  087B               	movf	??_ISR,w
  1180  000F  00FD               	movwf	_midiByte
  1181                           
  1182                           ;rhv1.c: 130:         if(midiByte >=0xF0){return;}
  1183  0010  30F0               	movlw	240
  1184  0011  027D               	subwf	_midiByte,w
  1185  0012  1C03               	skipc
  1186  0013  2815               	goto	u84_21
  1187  0014  2816               	goto	u84_20
  1188  0015                     u84_21:
  1189  0015  2817               	goto	i1l136
  1190  0016                     u84_20:
  1191  0016  2850               	goto	i1l137
  1192  0017                     i1l136:
  1193                           
  1194                           ;rhv1.c: 132:         if (midiByte & 0b10000000) {
  1195  0017  1FFD               	btfss	_midiByte,7
  1196  0018  281A               	goto	u85_21
  1197  0019  281B               	goto	u85_20
  1198  001A                     u85_21:
  1199  001A  2822               	goto	i1l1225
  1200  001B                     u85_20:
  1201  001B                     i1l1221:
  1202                           
  1203                           ;rhv1.c: 133:             runningStatus = midiByte;
  1204  001B  087D               	movf	_midiByte,w
  1205  001C  00FB               	movwf	??_ISR
  1206  001D  087B               	movf	??_ISR,w
  1207  001E  0140               	movlb	0	; select bank0
  1208  001F  00B1               	movwf	_runningStatus
  1209  0020                     i1l1223:
  1210                           
  1211                           ;rhv1.c: 134:             thirdByte = 0;
  1212  0020  01B0               	clrf	_thirdByte
  1213                           
  1214                           ;rhv1.c: 135:         }
  1215  0021  284E               	goto	i1l139
  1216  0022                     i1l1225:
  1217                           
  1218                           ;rhv1.c: 138:          if (thirdByte == 1) {
  1219  0022  0140               	movlb	0	; select bank0
  1220  0023  0330               	decf	_thirdByte,w
  1221  0024  1D03               	btfss	3,2
  1222  0025  2827               	goto	u86_21
  1223  0026  2828               	goto	u86_20
  1224  0027                     u86_21:
  1225  0027  283B               	goto	i1l1237
  1226  0028                     u86_20:
  1227  0028                     i1l1227:
  1228                           
  1229                           ;rhv1.c: 139:            midi_b = midiByte;
  1230  0028  087D               	movf	_midiByte,w
  1231  0029  00FB               	movwf	??_ISR
  1232  002A  087B               	movf	??_ISR,w
  1233  002B  00AE               	movwf	_midi_b
  1234  002C                     i1l1229:
  1235                           
  1236                           ;rhv1.c: 140:            handleMIDI(runningStatus, midi_a, midi_b);
  1237  002C  082F               	movf	_midi_a,w
  1238  002D  00FB               	movwf	??_ISR
  1239  002E  087B               	movf	??_ISR,w
  1240  002F  00F6               	movwf	handleMIDI@midi_a
  1241  0030  082E               	movf	_midi_b,w
  1242  0031  00FC               	movwf	??_ISR+1
  1243  0032  087C               	movf	??_ISR+1,w
  1244  0033  00F7               	movwf	handleMIDI@midi_b
  1245  0034  0831               	movf	_runningStatus,w
  1246  0035  3180  206F  3180   	fcall	_handleMIDI
  1247  0038                     i1l1231:
  1248                           
  1249                           ;rhv1.c: 141:            thirdByte = 0;
  1250  0038  0140               	movlb	0	; select bank0
  1251  0039  01B0               	clrf	_thirdByte
  1252  003A  2850               	goto	i1l137
  1253  003B                     i1l1237:
  1254                           
  1255                           ;rhv1.c: 144:           if (!runningStatus) {return;}
  1256  003B  0831               	movf	_runningStatus,w
  1257  003C  1D03               	btfss	3,2
  1258  003D  283F               	goto	u87_21
  1259  003E  2840               	goto	u87_20
  1260  003F                     u87_21:
  1261  003F  2841               	goto	i1l1241
  1262  0040                     u87_20:
  1263  0040  2850               	goto	i1l137
  1264  0041                     i1l1241:
  1265                           
  1266                           ;rhv1.c: 145:           if (runningStatus <= 0xEF) {
  1267  0041  30F0               	movlw	240
  1268  0042  0231               	subwf	_runningStatus,w
  1269  0043  1803               	skipnc
  1270  0044  2846               	goto	u88_21
  1271  0045  2847               	goto	u88_20
  1272  0046                     u88_21:
  1273  0046  284E               	goto	i1l139
  1274  0047                     u88_20:
  1275  0047                     i1l1243:
  1276                           
  1277                           ;rhv1.c: 146:              midi_a = midiByte;
  1278  0047  087D               	movf	_midiByte,w
  1279  0048  00FB               	movwf	??_ISR
  1280  0049  087B               	movf	??_ISR,w
  1281  004A  00AF               	movwf	_midi_a
  1282  004B                     i1l1245:
  1283                           
  1284                           ;rhv1.c: 147:                 thirdByte = 1;
  1285  004B  01B0               	clrf	_thirdByte
  1286  004C  0AB0               	incf	_thirdByte,f
  1287  004D  2850               	goto	i1l137
  1288  004E                     i1l139:	
  1289                           ;rhv1.c: 151:         }
  1290                           
  1291                           
  1292                           ;rhv1.c: 152:         RC1IF = 0;
  1293  004E  014E               	movlb	14	; select bank14
  1294  004F  128F               	bcf	15,5	;volatile
  1295  0050                     i1l137:	
  1296                           ;rhv1.c: 154:         return;
  1297                           
  1298  0050  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1299  0051  0009               	retfie
  1300  0052                     __end_of_ISR:
  1301                           
  1302                           	psect	text3
  1303  006F                     __ptext3:	
  1304 ;; *************** function _handleMIDI *****************
  1305 ;; Defined at:
  1306 ;;		line 208 in file "rhv1.c"
  1307 ;; Parameters:    Size  Location     Type
  1308 ;;  midiByte        1    wreg     unsigned char 
  1309 ;;  midi_a          1    6[COMMON] unsigned char 
  1310 ;;  midi_b          1    7[COMMON] unsigned char 
  1311 ;; Auto vars:     Size  Location     Type
  1312 ;;  midiByte        1   10[COMMON] unsigned char 
  1313 ;; Return value:  Size  Location     Type
  1314 ;;                  1    wreg      void 
  1315 ;; Registers used:
  1316 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1317 ;; Tracked objects:
  1318 ;;		On entry : 0/0
  1319 ;;		On exit  : 0/0
  1320 ;;		Unchanged: 0/0
  1321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1322 ;;      Params:         2       0       0       0
  1323 ;;      Locals:         1       0       0       0
  1324 ;;      Temps:          2       0       0       0
  1325 ;;      Totals:         5       0       0       0
  1326 ;;Total ram usage:        5 bytes
  1327 ;; Hardware stack levels used:    1
  1328 ;; Hardware stack levels required when called:    2
  1329 ;; This function calls:
  1330 ;;		_DAC8Write
  1331 ;;		_NoteOff
  1332 ;;		i1_DACWrite
  1333 ;; This function is called by:
  1334 ;;		_ISR
  1335 ;; This function uses a non-reentrant model
  1336 ;;
  1337                           
  1338                           
  1339                           ;psect for function _handleMIDI
  1340  006F                     _handleMIDI:
  1341                           
  1342                           ;incstack = 0
  1343                           ; Regs used in _handleMIDI: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1344                           ;handleMIDI@midiByte stored from wreg
  1345  006F  00FA               	movwf	handleMIDI@midiByte
  1346  0070                     i1l1045:
  1347                           
  1348                           ;rhv1.c: 210:     status = (midiByte & 0b11110000);
  1349  0070  087A               	movf	handleMIDI@midiByte,w
  1350  0071  39F0               	andlw	240
  1351  0072  00F8               	movwf	??_handleMIDI
  1352  0073  0878               	movf	??_handleMIDI,w
  1353  0074  0140               	movlb	0	; select bank0
  1354  0075  00AD               	movwf	_status
  1355                           
  1356                           ;rhv1.c: 211:     channel = (midiByte & 0b00001111);
  1357  0076  087A               	movf	handleMIDI@midiByte,w
  1358  0077  390F               	andlw	15
  1359  0078  00F8               	movwf	??_handleMIDI
  1360  0079  0878               	movf	??_handleMIDI,w
  1361  007A  00AC               	movwf	_channel
  1362  007B                     i1l1047:
  1363                           
  1364                           ;rhv1.c: 214:     if(status == 0xB0 && midi_a == 1 && channel == midiCh){
  1365  007B  30B0               	movlw	176
  1366  007C  062D               	xorwf	_status,w
  1367  007D  1D03               	btfss	3,2
  1368  007E  2880               	goto	u57_21
  1369  007F  2881               	goto	u57_20
  1370  0080                     u57_21:
  1371  0080  289A               	goto	i1l1061
  1372  0081                     u57_20:
  1373  0081                     i1l1049:
  1374  0081  0376               	decf	handleMIDI@midi_a,w
  1375  0082  1D03               	btfss	3,2
  1376  0083  2885               	goto	u58_21
  1377  0084  2886               	goto	u58_20
  1378  0085                     u58_21:
  1379  0085  289A               	goto	i1l1061
  1380  0086                     u58_20:
  1381  0086                     i1l1051:
  1382  0086  082C               	movf	_channel,w
  1383  0087  0639               	xorwf	_midiCh,w
  1384  0088  1D03               	skipz
  1385  0089  288B               	goto	u59_21
  1386  008A  288C               	goto	u59_20
  1387  008B                     u59_21:
  1388  008B  289A               	goto	i1l1061
  1389  008C                     u59_20:
  1390  008C                     i1l1053:
  1391                           
  1392                           ;rhv1.c: 215:         modLvl = midi_b;
  1393  008C  0877               	movf	handleMIDI@midi_b,w
  1394  008D  00F8               	movwf	??_handleMIDI
  1395  008E  0878               	movf	??_handleMIDI,w
  1396  008F  00A7               	movwf	_modLvl
  1397  0090                     i1l1055:
  1398                           
  1399                           ;rhv1.c: 216:         DAC8Write(0,modLvl);
  1400  0090  0827               	movf	_modLvl,w
  1401  0091  00F8               	movwf	??_handleMIDI
  1402  0092  0878               	movf	??_handleMIDI,w
  1403  0093  00F0               	movwf	DAC8Write@data
  1404  0094  3000               	movlw	0
  1405  0095  3182  224B  3180   	fcall	_DAC8Write
  1406  0098  296B               	goto	i1l167
  1407  0099                     i1l1057:
  1408                           
  1409                           ;rhv1.c: 217:         return;
  1410  0099  296B               	goto	i1l167
  1411  009A                     i1l1061:
  1412  009A  30E0               	movlw	224
  1413  009B  062D               	xorwf	_status,w
  1414  009C  1D03               	btfss	3,2
  1415  009D  289F               	goto	u60_21
  1416  009E  28A0               	goto	u60_20
  1417  009F                     u60_21:
  1418  009F  28E5               	goto	i1l1093
  1419  00A0                     u60_20:
  1420  00A0                     i1l1063:
  1421  00A0  082C               	movf	_channel,w
  1422  00A1  0639               	xorwf	_midiCh,w
  1423  00A2  1D03               	skipz
  1424  00A3  28A5               	goto	u61_21
  1425  00A4  28A6               	goto	u61_20
  1426  00A5                     u61_21:
  1427  00A5  28E5               	goto	i1l1093
  1428  00A6                     u61_20:
  1429  00A6                     i1l1065:
  1430                           
  1431                           ;rhv1.c: 223:         if(midi_b < lastBend && midi_b < 0x40){
  1432  00A6  083C               	movf	_lastBend,w
  1433  00A7  0277               	subwf	handleMIDI@midi_b,w
  1434  00A8  1803               	skipnc
  1435  00A9  28AB               	goto	u62_21
  1436  00AA  28AC               	goto	u62_20
  1437  00AB                     u62_21:
  1438  00AB  28C0               	goto	i1l1073
  1439  00AC                     u62_20:
  1440  00AC                     i1l1067:
  1441  00AC  3040               	movlw	64
  1442  00AD  0277               	subwf	handleMIDI@midi_b,w
  1443  00AE  1803               	skipnc
  1444  00AF  28B1               	goto	u63_21
  1445  00B0  28B2               	goto	u63_20
  1446  00B1                     u63_21:
  1447  00B1  28C0               	goto	i1l1073
  1448  00B2                     u63_20:
  1449  00B2                     i1l1069:
  1450                           
  1451                           ;rhv1.c: 224:             bendLvl = midi_b;
  1452  00B2  0877               	movf	handleMIDI@midi_b,w
  1453  00B3  00F8               	movwf	??_handleMIDI
  1454  00B4  01F9               	clrf	??_handleMIDI+1
  1455  00B5  0878               	movf	??_handleMIDI,w
  1456  00B6  00A2               	movwf	_bendLvl
  1457  00B7  0879               	movf	??_handleMIDI+1,w
  1458  00B8  00A3               	movwf	_bendLvl+1
  1459  00B9                     i1l1071:
  1460                           
  1461                           ;rhv1.c: 225:             tempBend = (oneVolt + bendLvl);
  1462  00B9  0822               	movf	_bendLvl,w
  1463  00BA  3E33               	addlw	51
  1464  00BB  00A0               	movwf	_tempBend
  1465  00BC  3003               	movlw	3
  1466  00BD  3D23               	addwfc	_bendLvl+1,w
  1467  00BE  00A1               	movwf	_tempBend+1
  1468                           
  1469                           ;rhv1.c: 226:         }
  1470  00BF  28D7               	goto	i1l1085
  1471  00C0                     i1l1073:
  1472  00C0  083C               	movf	_lastBend,w
  1473  00C1  0277               	subwf	handleMIDI@midi_b,w
  1474  00C2  1C03               	skipc
  1475  00C3  28C5               	goto	u64_21
  1476  00C4  28C6               	goto	u64_20
  1477  00C5                     u64_21:
  1478  00C5  28B2               	goto	i1l1069
  1479  00C6                     u64_20:
  1480  00C6                     i1l1075:
  1481  00C6  0877               	movf	handleMIDI@midi_b,w
  1482  00C7  023C               	subwf	_lastBend,w
  1483  00C8  1803               	skipnc
  1484  00C9  28CB               	goto	u65_21
  1485  00CA  28CC               	goto	u65_20
  1486  00CB                     u65_21:
  1487  00CB  28CD               	goto	i1l1081
  1488  00CC                     u65_20:
  1489  00CC  28B2               	goto	i1l1069
  1490  00CD                     i1l1081:
  1491  00CD  3040               	movlw	64
  1492  00CE  0677               	xorwf	handleMIDI@midi_b,w
  1493  00CF  1D03               	btfss	3,2
  1494  00D0  28D2               	goto	u66_21
  1495  00D1  28D3               	goto	u66_20
  1496  00D2                     u66_21:
  1497  00D2  28D7               	goto	i1l1085
  1498  00D3                     u66_20:
  1499  00D3                     i1l1083:
  1500  00D3  3033               	movlw	51
  1501  00D4  00A0               	movwf	_tempBend
  1502  00D5  3003               	movlw	3
  1503  00D6  00A1               	movwf	_tempBend+1
  1504  00D7                     i1l1085:
  1505                           
  1506                           ;rhv1.c: 235:         DACWrite(1,tempBend);
  1507  00D7  0821               	movf	_tempBend+1,w
  1508  00D8  00F1               	movwf	i1DACWrite@data+1
  1509  00D9  0820               	movf	_tempBend,w
  1510  00DA  00F0               	movwf	i1DACWrite@data
  1511  00DB  3001               	movlw	1
  1512  00DC  3182  22A7  3180   	fcall	i1_DACWrite
  1513  00DF                     i1l1087:
  1514                           
  1515                           ;rhv1.c: 236:         lastBend = midi_b;
  1516  00DF  0877               	movf	handleMIDI@midi_b,w
  1517  00E0  00F8               	movwf	??_handleMIDI
  1518  00E1  0878               	movf	??_handleMIDI,w
  1519  00E2  0140               	movlb	0	; select bank0
  1520  00E3  00BC               	movwf	_lastBend
  1521  00E4  296B               	goto	i1l167
  1522  00E5                     i1l1093:
  1523  00E5  3090               	movlw	144
  1524  00E6  062D               	xorwf	_status,w
  1525  00E7  1D03               	btfss	3,2
  1526  00E8  28EA               	goto	u67_21
  1527  00E9  28EB               	goto	u67_20
  1528  00EA                     u67_21:
  1529  00EA  2953               	goto	i1l1139
  1530  00EB                     u67_20:
  1531  00EB                     i1l1095:
  1532  00EB  082C               	movf	_channel,w
  1533  00EC  0639               	xorwf	_midiCh,w
  1534  00ED  1D03               	skipz
  1535  00EE  28F0               	goto	u68_21
  1536  00EF  28F1               	goto	u68_20
  1537  00F0                     u68_21:
  1538  00F0  2953               	goto	i1l1139
  1539  00F1                     u68_20:
  1540  00F1                     i1l1097:
  1541  00F1  0876               	movf	handleMIDI@midi_a,w
  1542  00F2  1903               	btfsc	3,2
  1543  00F3  28F5               	goto	u69_21
  1544  00F4  28F6               	goto	u69_20
  1545  00F5                     u69_21:
  1546  00F5  2953               	goto	i1l1139
  1547  00F6                     u69_20:
  1548  00F6                     i1l1099:
  1549  00F6  083B               	movf	_LowestNote,w
  1550  00F7  0276               	subwf	handleMIDI@midi_a,w
  1551  00F8  1C03               	skipc
  1552  00F9  28FB               	goto	u70_21
  1553  00FA  28FC               	goto	u70_20
  1554  00FB                     u70_21:
  1555  00FB  2953               	goto	i1l1139
  1556  00FC                     u70_20:
  1557  00FC                     i1l1101:
  1558                           
  1559                           ;rhv1.c: 241:     {;rhv1.c: 242:         triggerNote = midi_a - LowestNote;
  1560  00FC  083B               	movf	_LowestNote,w
  1561  00FD  0276               	subwf	handleMIDI@midi_a,w
  1562  00FE  00F8               	movwf	??_handleMIDI
  1563  00FF  0878               	movf	??_handleMIDI,w
  1564  0100  00AB               	movwf	_triggerNote
  1565  0101                     i1l1103:
  1566                           
  1567                           ;rhv1.c: 243:         if(midi_a > HighestNote){return;}
  1568  0101  0876               	movf	handleMIDI@midi_a,w
  1569  0102  023A               	subwf	_HighestNote,w
  1570  0103  1803               	skipnc
  1571  0104  2906               	goto	u71_21
  1572  0105  2907               	goto	u71_20
  1573  0106                     u71_21:
  1574  0106  2908               	goto	i1l1107
  1575  0107                     u71_20:
  1576  0107  296B               	goto	i1l167
  1577  0108                     i1l1107:
  1578                           
  1579                           ;rhv1.c: 245:         if(midi_b == 0){NoteOff(); return;}
  1580  0108  0877               	movf	handleMIDI@midi_b,w
  1581  0109  1D03               	btfss	3,2
  1582  010A  290C               	goto	u72_21
  1583  010B  290D               	goto	u72_20
  1584  010C                     u72_21:
  1585  010C  2911               	goto	i1l1113
  1586  010D                     u72_20:
  1587  010D                     i1l1109:
  1588  010D  3182  22CD  3180   	fcall	_NoteOff
  1589  0110  296B               	goto	i1l167
  1590  0111                     i1l1113:
  1591                           
  1592                           ;rhv1.c: 247:         DACWrite(0,VCODAC[triggerNote]);
  1593  0111  082B               	movf	_triggerNote,w
  1594  0112  00F8               	movwf	??_handleMIDI
  1595  0113  01F9               	clrf	??_handleMIDI+1
  1596  0114  35F8               	lslf	??_handleMIDI,f
  1597  0115  0DF9               	rlf	??_handleMIDI+1,f
  1598  0116  306C               	movlw	low (_VCODAC| (0+32768))
  1599  0117  0778               	addwf	??_handleMIDI,w
  1600  0118  0084               	movwf	4
  1601  0119  3081               	movlw	high (_VCODAC| (0+32768))
  1602  011A  3D79               	addwfc	??_handleMIDI+1,w
  1603  011B  0085               	movwf	5
  1604  011C  3F00               	moviw [0]fsr0
  1605  011D  00F0               	movwf	i1DACWrite@data
  1606  011E  3F01               	moviw [1]fsr0
  1607  011F  00F1               	movwf	i1DACWrite@data+1
  1608  0120  3000               	movlw	0
  1609  0121  3182  22A7  3180   	fcall	i1_DACWrite
  1610  0124                     i1l1115:
  1611                           
  1612                           ;rhv1.c: 248:         DAC8Write(1,midi_b);
  1613  0124  0877               	movf	handleMIDI@midi_b,w
  1614  0125  00F8               	movwf	??_handleMIDI
  1615  0126  0878               	movf	??_handleMIDI,w
  1616  0127  00F0               	movwf	DAC8Write@data
  1617  0128  3001               	movlw	1
  1618  0129  3182  224B  3180   	fcall	_DAC8Write
  1619  012C                     i1l1117:
  1620                           
  1621                           ;rhv1.c: 250:         if(RC0 == 0){
  1622  012C  0140               	movlb	0	; select bank0
  1623  012D  180E               	btfsc	14,0	;volatile
  1624  012E  2930               	goto	u73_21
  1625  012F  2931               	goto	u73_20
  1626  0130                     u73_21:
  1627  0130  2938               	goto	i1l1123
  1628  0131                     u73_20:
  1629  0131                     i1l1119:
  1630                           
  1631                           ;rhv1.c: 251:             LATC = (LATC & ~0b00000011) | 0b00000011;
  1632  0131  081A               	movf	26,w	;volatile
  1633  0132  39FC               	andlw	252
  1634  0133  3803               	iorlw	3
  1635  0134  009A               	movwf	26	;volatile
  1636  0135                     i1l1121:
  1637                           
  1638                           ;rhv1.c: 252:             trigenab = 1;
  1639  0135  01A8               	clrf	_trigenab
  1640  0136  0AA8               	incf	_trigenab,f
  1641                           
  1642                           ;rhv1.c: 253:         }
  1643  0137  294C               	goto	i1l1131
  1644  0138                     i1l1123:
  1645  0138  033D               	decf	_envtrig,w
  1646  0139  1D03               	btfss	3,2
  1647  013A  293C               	goto	u74_21
  1648  013B  293D               	goto	u74_20
  1649  013C                     u74_21:
  1650  013C  294C               	goto	i1l1131
  1651  013D                     u74_20:
  1652  013D                     i1l1125:
  1653  013D  1C0E               	btfss	14,0	;volatile
  1654  013E  2940               	goto	u75_21
  1655  013F  2941               	goto	u75_20
  1656  0140                     u75_21:
  1657  0140  294C               	goto	i1l1131
  1658  0141                     u75_20:
  1659  0141                     i1l1127:
  1660                           
  1661                           ;rhv1.c: 255:             RC1 = 1;
  1662  0141  148E               	bsf	14,1	;volatile
  1663                           
  1664                           ;rhv1.c: 256:             trigenab = 1;
  1665  0142  01A8               	clrf	_trigenab
  1666  0143  0AA8               	incf	_trigenab,f
  1667  0144                     i1l1129:
  1668                           
  1669                           ;rhv1.c: 257:             DAC8Write(1,midi_b);
  1670  0144  0877               	movf	handleMIDI@midi_b,w
  1671  0145  00F8               	movwf	??_handleMIDI
  1672  0146  0878               	movf	??_handleMIDI,w
  1673  0147  00F0               	movwf	DAC8Write@data
  1674  0148  3001               	movlw	1
  1675  0149  3182  224B  3180   	fcall	_DAC8Write
  1676  014C                     i1l1131:
  1677                           
  1678                           ;rhv1.c: 260:         trigcount = 0;
  1679  014C  0140               	movlb	0	; select bank0
  1680  014D  01A9               	clrf	_trigcount
  1681  014E                     i1l1133:
  1682                           
  1683                           ;rhv1.c: 261:         lastNote = midi_a;
  1684  014E  0876               	movf	handleMIDI@midi_a,w
  1685  014F  00F8               	movwf	??_handleMIDI
  1686  0150  0878               	movf	??_handleMIDI,w
  1687  0151  00AA               	movwf	_lastNote
  1688  0152  296B               	goto	i1l167
  1689  0153                     i1l1139:
  1690  0153  3080               	movlw	128
  1691  0154  062D               	xorwf	_status,w
  1692  0155  1903               	btfsc	3,2
  1693  0156  2958               	goto	u76_21
  1694  0157  2959               	goto	u76_20
  1695  0158                     u76_21:
  1696  0158  295E               	goto	i1l1143
  1697  0159                     u76_20:
  1698  0159                     i1l1141:
  1699  0159  0877               	movf	handleMIDI@midi_b,w
  1700  015A  1D03               	btfss	3,2
  1701  015B  295D               	goto	u77_21
  1702  015C  295E               	goto	u77_20
  1703  015D                     u77_21:
  1704  015D  2899               	goto	i1l1057
  1705  015E                     u77_20:
  1706  015E                     i1l1143:
  1707  015E  082C               	movf	_channel,w
  1708  015F  0639               	xorwf	_midiCh,w
  1709  0160  1D03               	skipz
  1710  0161  2963               	goto	u78_21
  1711  0162  2964               	goto	u78_20
  1712  0163                     u78_21:
  1713  0163  2899               	goto	i1l1057
  1714  0164                     u78_20:
  1715  0164                     i1l1145:
  1716  0164  083B               	movf	_LowestNote,w
  1717  0165  0276               	subwf	handleMIDI@midi_a,w
  1718  0166  1C03               	skipc
  1719  0167  2969               	goto	u79_21
  1720  0168  296A               	goto	u79_20
  1721  0169                     u79_21:
  1722  0169  2899               	goto	i1l1057
  1723  016A                     u79_20:
  1724  016A  290D               	goto	i1l1109
  1725  016B                     i1l167:
  1726  016B  0008               	return
  1727  016C                     __end_of_handleMIDI:
  1728                           
  1729                           	psect	text4
  1730  02A7                     __ptext4:	
  1731 ;; *************** function i1_DACWrite *****************
  1732 ;; Defined at:
  1733 ;;		line 161 in file "rhv1.c"
  1734 ;; Parameters:    Size  Location     Type
  1735 ;;  dac             1    wreg     unsigned char 
  1736 ;;  data            2    0[COMMON] unsigned int 
  1737 ;; Auto vars:     Size  Location     Type
  1738 ;;  dac             1    3[COMMON] unsigned char 
  1739 ;;  dacMSB          1    5[COMMON] unsigned char 
  1740 ;;  dacLSB          1    4[COMMON] unsigned char 
  1741 ;; Return value:  Size  Location     Type
  1742 ;;                  1    wreg      void 
  1743 ;; Registers used:
  1744 ;;		wreg, status,2, status,0
  1745 ;; Tracked objects:
  1746 ;;		On entry : 0/0
  1747 ;;		On exit  : 0/0
  1748 ;;		Unchanged: 0/0
  1749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1750 ;;      Params:         2       0       0       0
  1751 ;;      Locals:         3       0       0       0
  1752 ;;      Temps:          1       0       0       0
  1753 ;;      Totals:         6       0       0       0
  1754 ;;Total ram usage:        6 bytes
  1755 ;; Hardware stack levels used:    1
  1756 ;; This function calls:
  1757 ;;		Nothing
  1758 ;; This function is called by:
  1759 ;;		_handleMIDI
  1760 ;; This function uses a non-reentrant model
  1761 ;;
  1762                           
  1763                           
  1764                           ;psect for function i1_DACWrite
  1765  02A7                     i1_DACWrite:
  1766                           
  1767                           ;incstack = 0
  1768                           ; Regs used in i1_DACWrite: [wreg+status,2+status,0]
  1769                           ;i1DACWrite@dac stored from wreg
  1770  02A7  00F3               	movwf	i1DACWrite@dac
  1771  02A8                     i1l1009:
  1772                           
  1773                           ;rhv1.c: 164:     unsigned char dacLSB = 0;
  1774  02A8  01F4               	clrf	i1DACWrite@dacLSB
  1775  02A9                     i1l1011:
  1776                           
  1777                           ;rhv1.c: 165:     dacMSB = (data >> 8) & 0xFF;
  1778  02A9  0871               	movf	i1DACWrite@data+1,w
  1779  02AA  00F2               	movwf	??i1_DACWrite
  1780  02AB  0872               	movf	??i1_DACWrite,w
  1781  02AC  00F5               	movwf	i1DACWrite@dacMSB
  1782  02AD                     i1l1013:
  1783                           
  1784                           ;rhv1.c: 167:     if(dac == 1){ dacMSB |= 0x80;}
  1785  02AD  0373               	decf	i1DACWrite@dac,w
  1786  02AE  1D03               	btfss	3,2
  1787  02AF  2AB1               	goto	u51_21
  1788  02B0  2AB2               	goto	u51_20
  1789  02B1                     u51_21:
  1790  02B1  2AB3               	goto	i1l1017
  1791  02B2                     u51_20:
  1792  02B2                     i1l1015:
  1793  02B2  17F5               	bsf	i1DACWrite@dacMSB,7
  1794  02B3                     i1l1017:
  1795                           
  1796                           ;rhv1.c: 169:     dacMSB |= 0b01110000;
  1797  02B3  3070               	movlw	112
  1798  02B4  00F2               	movwf	??i1_DACWrite
  1799  02B5  0872               	movf	??i1_DACWrite,w
  1800  02B6  04F5               	iorwf	i1DACWrite@dacMSB,f
  1801  02B7                     i1l1019:
  1802                           
  1803                           ;rhv1.c: 170:     dacLSB = (data & 0xFF);
  1804  02B7  0870               	movf	i1DACWrite@data,w
  1805  02B8  00F2               	movwf	??i1_DACWrite
  1806  02B9  0872               	movf	??i1_DACWrite,w
  1807  02BA  00F4               	movwf	i1DACWrite@dacLSB
  1808  02BB                     i1l1021:
  1809                           
  1810                           ;rhv1.c: 172:     RC3 = 0;
  1811  02BB  0140               	movlb	0	; select bank0
  1812  02BC  118E               	bcf	14,3	;volatile
  1813  02BD                     i1l1023:
  1814                           
  1815                           ;rhv1.c: 174:     SSP1BUF = dacMSB;
  1816  02BD  0875               	movf	i1DACWrite@dacMSB,w
  1817  02BE  0143               	movlb	3	; select bank3
  1818  02BF  008C               	movwf	12	;volatile
  1819  02C0                     i1l147:	
  1820                           ;rhv1.c: 175:     while(!SSP1STATbits.BF);
  1821                           
  1822  02C0  1C0F               	btfss	15,0	;volatile
  1823  02C1  2AC3               	goto	u52_21
  1824  02C2  2AC4               	goto	u52_20
  1825  02C3                     u52_21:
  1826  02C3  2AC0               	goto	i1l147
  1827  02C4                     u52_20:
  1828  02C4                     i1l1025:
  1829                           
  1830                           ;rhv1.c: 176:     SSP1BUF = dacLSB;
  1831  02C4  0874               	movf	i1DACWrite@dacLSB,w
  1832  02C5  008C               	movwf	12	;volatile
  1833  02C6                     i1l150:	
  1834                           ;rhv1.c: 177:     while(!SSP1STATbits.BF);
  1835                           
  1836  02C6  1C0F               	btfss	15,0	;volatile
  1837  02C7  2AC9               	goto	u53_21
  1838  02C8  2ACA               	goto	u53_20
  1839  02C9                     u53_21:
  1840  02C9  2AC6               	goto	i1l150
  1841  02CA                     u53_20:
  1842  02CA                     i1l152:
  1843                           
  1844                           ;rhv1.c: 179:     RC3 = 1;
  1845  02CA  0140               	movlb	0	; select bank0
  1846  02CB  158E               	bsf	14,3	;volatile
  1847  02CC                     i1l153:	
  1848                           ;rhv1.c: 180:     return;
  1849                           
  1850  02CC  0008               	return
  1851  02CD                     __end_ofi1_DACWrite:
  1852                           
  1853                           	psect	text5
  1854  02CD                     __ptext5:	
  1855 ;; *************** function _NoteOff *****************
  1856 ;; Defined at:
  1857 ;;		line 275 in file "rhv1.c"
  1858 ;; Parameters:    Size  Location     Type
  1859 ;;		None
  1860 ;; Auto vars:     Size  Location     Type
  1861 ;;		None
  1862 ;; Return value:  Size  Location     Type
  1863 ;;                  1    wreg      void 
  1864 ;; Registers used:
  1865 ;;		wreg, status,2, status,0, pclath, cstack
  1866 ;; Tracked objects:
  1867 ;;		On entry : 0/0
  1868 ;;		On exit  : 0/0
  1869 ;;		Unchanged: 0/0
  1870 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1871 ;;      Params:         0       0       0       0
  1872 ;;      Locals:         0       0       0       0
  1873 ;;      Temps:          0       0       0       0
  1874 ;;      Totals:         0       0       0       0
  1875 ;;Total ram usage:        0 bytes
  1876 ;; Hardware stack levels used:    1
  1877 ;; Hardware stack levels required when called:    1
  1878 ;; This function calls:
  1879 ;;		_DAC8Write
  1880 ;; This function is called by:
  1881 ;;		_handleMIDI
  1882 ;; This function uses a non-reentrant model
  1883 ;;
  1884                           
  1885                           
  1886                           ;psect for function _NoteOff
  1887  02CD                     _NoteOff:
  1888  02CD                     i1l999:	
  1889                           ;incstack = 0
  1890                           ; Regs used in _NoteOff: [wreg+status,2+status,0+pclath+cstack]
  1891                           
  1892                           
  1893                           ;rhv1.c: 276:     if(lastNote == midi_a){
  1894  02CD  0140               	movlb	0	; select bank0
  1895  02CE  082A               	movf	_lastNote,w
  1896  02CF  062F               	xorwf	_midi_a,w
  1897  02D0  1D03               	skipz
  1898  02D1  2AD3               	goto	u50_21
  1899  02D2  2AD4               	goto	u50_20
  1900  02D3                     u50_21:
  1901  02D3  2ADD               	goto	i1l191
  1902  02D4                     u50_20:
  1903  02D4                     i1l1001:
  1904                           
  1905                           ;rhv1.c: 277:         LATC = (LATC & ~0b00000011);
  1906  02D4  081A               	movf	26,w	;volatile
  1907  02D5  39FC               	andlw	252
  1908  02D6  009A               	movwf	26	;volatile
  1909  02D7                     i1l1003:
  1910                           
  1911                           ;rhv1.c: 278:         trigenab = 0;
  1912  02D7  01A8               	clrf	_trigenab
  1913  02D8                     i1l1005:
  1914                           
  1915                           ;rhv1.c: 279:         DAC8Write(1,0);
  1916  02D8  01F0               	clrf	DAC8Write@data
  1917  02D9  3001               	movlw	1
  1918  02DA  3182  224B  3182   	fcall	_DAC8Write
  1919  02DD                     i1l191:
  1920  02DD  0008               	return
  1921  02DE                     __end_of_NoteOff:
  1922                           
  1923                           	psect	text6
  1924  024B                     __ptext6:	
  1925 ;; *************** function _DAC8Write *****************
  1926 ;; Defined at:
  1927 ;;		line 186 in file "rhv1.c"
  1928 ;; Parameters:    Size  Location     Type
  1929 ;;  dac             1    wreg     unsigned char 
  1930 ;;  data            1    0[COMMON] unsigned char 
  1931 ;; Auto vars:     Size  Location     Type
  1932 ;;  dac             1    3[COMMON] unsigned char 
  1933 ;;  dacMSB          1    5[COMMON] unsigned char 
  1934 ;;  dacLSB          1    4[COMMON] unsigned char 
  1935 ;; Return value:  Size  Location     Type
  1936 ;;                  1    wreg      void 
  1937 ;; Registers used:
  1938 ;;		wreg, status,2, status,0
  1939 ;; Tracked objects:
  1940 ;;		On entry : 0/0
  1941 ;;		On exit  : 0/0
  1942 ;;		Unchanged: 0/0
  1943 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1944 ;;      Params:         1       0       0       0
  1945 ;;      Locals:         3       0       0       0
  1946 ;;      Temps:          2       0       0       0
  1947 ;;      Totals:         6       0       0       0
  1948 ;;Total ram usage:        6 bytes
  1949 ;; Hardware stack levels used:    1
  1950 ;; This function calls:
  1951 ;;		Nothing
  1952 ;; This function is called by:
  1953 ;;		_handleMIDI
  1954 ;;		_NoteOff
  1955 ;; This function uses a non-reentrant model
  1956 ;;
  1957                           
  1958                           
  1959                           ;psect for function _DAC8Write
  1960  024B                     _DAC8Write:
  1961                           
  1962                           ;incstack = 0
  1963                           ; Regs used in _DAC8Write: [wreg+status,2+status,0]
  1964                           ;DAC8Write@dac stored from wreg
  1965  024B  00F3               	movwf	DAC8Write@dac
  1966  024C                     i1l983:
  1967                           
  1968                           ;rhv1.c: 189:     unsigned char dacLSB = 0;
  1969  024C  01F4               	clrf	DAC8Write@dacLSB
  1970  024D                     i1l985:
  1971                           
  1972                           ;rhv1.c: 190:     dacMSB = (data >> 4);
  1973  024D  0870               	movf	DAC8Write@data,w
  1974  024E  00F1               	movwf	??_DAC8Write
  1975  024F  3004               	movlw	4
  1976  0250                     u45_25:
  1977  0250  36F1               	lsrf	??_DAC8Write,f
  1978  0251  0B89               	decfsz	9,f
  1979  0252  2A50               	goto	u45_25
  1980  0253  0871               	movf	??_DAC8Write,w
  1981  0254  00F2               	movwf	??_DAC8Write+1
  1982  0255  0872               	movf	??_DAC8Write+1,w
  1983  0256  00F5               	movwf	DAC8Write@dacMSB
  1984  0257                     i1l987:
  1985                           
  1986                           ;rhv1.c: 192:     if(dac == 1){ dacMSB |= 0x80;}
  1987  0257  0373               	decf	DAC8Write@dac,w
  1988  0258  1D03               	btfss	3,2
  1989  0259  2A5B               	goto	u46_21
  1990  025A  2A5C               	goto	u46_20
  1991  025B                     u46_21:
  1992  025B  2A5D               	goto	i1l991
  1993  025C                     u46_20:
  1994  025C                     i1l989:
  1995  025C  17F5               	bsf	DAC8Write@dacMSB,7
  1996  025D                     i1l991:
  1997                           
  1998                           ;rhv1.c: 194:     dacMSB |= 0b01110000;
  1999  025D  3070               	movlw	112
  2000  025E  00F1               	movwf	??_DAC8Write
  2001  025F  0871               	movf	??_DAC8Write,w
  2002  0260  04F5               	iorwf	DAC8Write@dacMSB,f
  2003                           
  2004                           ;rhv1.c: 195:     dacLSB = ((data <<4) & 0x0F);
  2005  0261  0870               	movf	DAC8Write@data,w
  2006  0262  00F1               	movwf	??_DAC8Write
  2007  0263  3003               	movlw	3
  2008  0264                     u47_25:
  2009  0264  35F1               	lslf	??_DAC8Write,f
  2010  0265  3EFF               	addlw	-1
  2011  0266  1D03               	skipz
  2012  0267  2A64               	goto	u47_25
  2013  0268  3571               	lslf	??_DAC8Write,w
  2014  0269  390F               	andlw	15
  2015  026A  00F2               	movwf	??_DAC8Write+1
  2016  026B  0872               	movf	??_DAC8Write+1,w
  2017  026C  00F4               	movwf	DAC8Write@dacLSB
  2018  026D                     i1l993:
  2019                           
  2020                           ;rhv1.c: 197:     RC2 = 0;
  2021  026D  0140               	movlb	0	; select bank0
  2022  026E  110E               	bcf	14,2	;volatile
  2023  026F                     i1l995:
  2024                           
  2025                           ;rhv1.c: 199:     SSP1BUF = dacMSB;
  2026  026F  0875               	movf	DAC8Write@dacMSB,w
  2027  0270  0143               	movlb	3	; select bank3
  2028  0271  008C               	movwf	12	;volatile
  2029  0272                     i1l157:	
  2030                           ;rhv1.c: 200:     while(!SSP1STATbits.BF);
  2031                           
  2032  0272  1C0F               	btfss	15,0	;volatile
  2033  0273  2A75               	goto	u48_21
  2034  0274  2A76               	goto	u48_20
  2035  0275                     u48_21:
  2036  0275  2A72               	goto	i1l157
  2037  0276                     u48_20:
  2038  0276                     i1l997:
  2039                           
  2040                           ;rhv1.c: 201:     SSP1BUF = dacLSB;
  2041  0276  0874               	movf	DAC8Write@dacLSB,w
  2042  0277  008C               	movwf	12	;volatile
  2043  0278                     i1l160:	
  2044                           ;rhv1.c: 202:     while(!SSP1STATbits.BF);
  2045                           
  2046  0278  1C0F               	btfss	15,0	;volatile
  2047  0279  2A7B               	goto	u49_21
  2048  027A  2A7C               	goto	u49_20
  2049  027B                     u49_21:
  2050  027B  2A78               	goto	i1l160
  2051  027C                     u49_20:
  2052  027C                     i1l162:
  2053                           
  2054                           ;rhv1.c: 204:     RC2 = 1;
  2055  027C  0140               	movlb	0	; select bank0
  2056  027D  150E               	bsf	14,2	;volatile
  2057  027E                     i1l163:	
  2058                           ;rhv1.c: 205:     return;
  2059                           
  2060  027E  0008               	return
  2061  027F                     __end_of_DAC8Write:
  2062  007E                     btemp	set	126	;btemp
  2063  007E                     int$flags	set	126
  2064  007E                     wtemp0	set	126
  2065                           
  2066                           	psect	config
  2067                           
  2068                           ;Config register CONFIG1 @ 0x8007
  2069                           ;	External Oscillator mode selection bits
  2070                           ;	FEXTOSC = OFF, Oscillator not enabled
  2071                           ;	Power-up default value for COSC bits
  2072                           ;	RSTOSC = HFINT1, HFINTOSC (1MHz)
  2073                           ;	Clock Out Enable bit
  2074                           ;	CLKOUTEN = OFF, CLKOUT function is disabled; i/o or oscillator function on OSC2
  2075                           ;	Clock Switch Enable bit
  2076                           ;	CSWEN = ON, Writing to NOSC and NDIV is allowed
  2077                           ;	Fail-Safe Clock Monitor Enable bit
  2078                           ;	FCMEN = OFF, FSCM timer disabled
  2079  8007                     	org	32775
  2080  8007  1FEC               	dw	8172
  2081                           
  2082                           ;Config register CONFIG2 @ 0x8008
  2083                           ;	Master Clear Enable bit
  2084                           ;	MCLRE = ON, MCLR pin is Master Clear function
  2085                           ;	Power-up Timer Enable bit
  2086                           ;	PWRTE = OFF, PWRT disabled
  2087                           ;	Low-Power BOR enable bit
  2088                           ;	LPBOREN = OFF, ULPBOR disabled
  2089                           ;	Brown-out reset enable bits
  2090                           ;	BOREN = ON, Brown-out Reset Enabled, SBOREN bit is ignored
  2091                           ;	Brown-out Reset Voltage Selection
  2092                           ;	BORV = LO, Brown-out Reset Voltage (VBOR) set to 1.9V on LF, and 2.45V on F Devices
  2093                           ;	Zero-cross detect disable
  2094                           ;	ZCD = OFF, Zero-cross detect circuit is disabled at POR.
  2095                           ;	Peripheral Pin Select one-way control
  2096                           ;	PPS1WAY = ON, The PPSLOCK bit can be cleared and set only once in software
  2097                           ;	Stack Overflow/Underflow Reset Enable bit
  2098                           ;	STVREN = ON, Stack Overflow or Underflow will cause a reset
  2099  8008                     	org	32776
  2100  8008  3FFF               	dw	16383
  2101                           
  2102                           ;Config register CONFIG3 @ 0x8009
  2103                           ;	WDT Period Select bits
  2104                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  2105                           ;	WDT operating mode
  2106                           ;	WDTE = OFF, WDT Disabled, SWDTEN is ignored
  2107                           ;	WDT Window Select bits
  2108                           ;	WDTCWS = WDTCWS_7, window always open (100%); software control; keyed access not requi
      +                          red
  2109                           ;	WDT input clock selector
  2110                           ;	WDTCCS = SC, Software Control
  2111  8009                     	org	32777
  2112  8009  3F9F               	dw	16287
  2113                           
  2114                           ;Config register CONFIG4 @ 0x800A
  2115                           ;	Boot Block Size Selection bits
  2116                           ;	BBSIZE = BB512, 512 words boot block size
  2117                           ;	Boot Block Enable bit
  2118                           ;	BBEN = OFF, Boot Block disabled
  2119                           ;	SAF Enable bit
  2120                           ;	SAFEN = OFF, SAF disabled
  2121                           ;	Application Block Write Protection bit
  2122                           ;	WRTAPP = OFF, Application Block not write protected
  2123                           ;	Boot Block Write Protection bit
  2124                           ;	WRTB = OFF, Boot Block not write protected
  2125                           ;	Configuration Register Write Protection bit
  2126                           ;	WRTC = OFF, Configuration Register not write protected
  2127                           ;	Storage Area Flash Write Protection bit
  2128                           ;	WRTSAF = OFF, SAF not write protected
  2129                           ;	Low Voltage Programming Enable bit
  2130                           ;	LVP = ON, Low Voltage programming enabled. MCLR/Vpp pin function is MCLR.
  2131  800A                     	org	32778
  2132  800A  3FFF               	dw	16383
  2133                           
  2134                           ;Config register CONFIG5 @ 0x800B
  2135                           ;	UserNVM Program memory code protection bit
  2136                           ;	CP = OFF, UserNVM code protection disabled
  2137  800B                     	org	32779
  2138  800B  3FFF               	dw	16383

Data Sizes:
    Strings     0
    Constant    124
    Data        6
    BSS         19
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80      7      31
    BANK1            80      0       0
    BANK2            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_handleMIDI
    _handleMIDI->_DAC8Write
    _handleMIDI->i1_DACWrite
    _NoteOff->_DAC8Write

Critical Paths under _main in BANK0

    _main->_DACWrite

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0     368
                                              6 BANK0      1     1      0
                           _DACWrite
 ---------------------------------------------------------------------------------
 (1) _DACWrite                                             6     4      2     368
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _ISR                                                  2     2      0    1644
                                             11 COMMON     2     2      0
                         _handleMIDI
 ---------------------------------------------------------------------------------
 (3) _handleMIDI                                           5     3      2    1644
                                              6 COMMON     5     3      2
                          _DAC8Write
                            _NoteOff
                         i1_DACWrite
 ---------------------------------------------------------------------------------
 (4) i1_DACWrite                                           6     4      2     168
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (4) _NoteOff                                              0     0      0     420
                          _DAC8Write
 ---------------------------------------------------------------------------------
 (5) _DAC8Write                                            6     5      1     420
                                              0 COMMON     6     5      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DACWrite

 _ISR (ROOT)
   _handleMIDI
     _DAC8Write
     _NoteOff
       _DAC8Write
     i1_DACWrite

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      7      1F       5       38.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
ABS                  0      0      2D      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      2D      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BITSFR32             0      0       0      33        0.0%
SFR32                0      0       0      33        0.0%
BITSFR33             0      0       0      34        0.0%
SFR33                0      0       0      34        0.0%
BITSFR34             0      0       0      35        0.0%
SFR34                0      0       0      35        0.0%
BITSFR35             0      0       0      36        0.0%
SFR35                0      0       0      36        0.0%
BITSFR36             0      0       0      37        0.0%
SFR36                0      0       0      37        0.0%
BITSFR37             0      0       0      38        0.0%
SFR37                0      0       0      38        0.0%
BITSFR38             0      0       0      39        0.0%
SFR38                0      0       0      39        0.0%
BITSFR39             0      0       0      40        0.0%
SFR39                0      0       0      40        0.0%
BITSFR40             0      0       0      41        0.0%
SFR40                0      0       0      41        0.0%
BITSFR41             0      0       0      42        0.0%
SFR41                0      0       0      42        0.0%
BITSFR42             0      0       0      43        0.0%
SFR42                0      0       0      43        0.0%
BITSFR43             0      0       0      44        0.0%
SFR43                0      0       0      44        0.0%
BITSFR44             0      0       0      45        0.0%
SFR44                0      0       0      45        0.0%
BITSFR45             0      0       0      46        0.0%
SFR45                0      0       0      46        0.0%
BITSFR46             0      0       0      47        0.0%
SFR46                0      0       0      47        0.0%
BITSFR47             0      0       0      48        0.0%
SFR47                0      0       0      48        0.0%
BITSFR48             0      0       0      49        0.0%
SFR48                0      0       0      49        0.0%
BITSFR49             0      0       0      50        0.0%
SFR49                0      0       0      50        0.0%
BITSFR50             0      0       0      51        0.0%
SFR50                0      0       0      51        0.0%
BITSFR51             0      0       0      52        0.0%
SFR51                0      0       0      52        0.0%
BITSFR52             0      0       0      53        0.0%
SFR52                0      0       0      53        0.0%
BITSFR53             0      0       0      54        0.0%
SFR53                0      0       0      54        0.0%
BITSFR54             0      0       0      55        0.0%
SFR54                0      0       0      55        0.0%
BITSFR55             0      0       0      56        0.0%
SFR55                0      0       0      56        0.0%
BITSFR56             0      0       0      57        0.0%
SFR56                0      0       0      57        0.0%
BITSFR57             0      0       0      58        0.0%
SFR57                0      0       0      58        0.0%
BITSFR58             0      0       0      59        0.0%
SFR58                0      0       0      59        0.0%
BITSFR59             0      0       0      60        0.0%
SFR59                0      0       0      60        0.0%
BITSFR60             0      0       0      61        0.0%
SFR60                0      0       0      61        0.0%
BITSFR61             0      0       0      62        0.0%
SFR61                0      0       0      62        0.0%
BITSFR62             0      0       0      63        0.0%
SFR62                0      0       0      63        0.0%
BITSFR63             0      0       0      64        0.0%
SFR63                0      0       0      64        0.0%


Microchip Technology PIC Macro Assembler V2.30 build 20200825195618 
Symbol Table                                                                                   Mon Mar 01 18:10:45 2021

                    l150 02A0                      l152 02A4                      l153 02A6  
                    l147 0298                      _CKE 0C7E                      _CKP 0C84  
                    _GIE 005F                      _RA0 0060                      _RC0 0070  
                    _RC1 0071                      _RC2 0072                      _RC3 0073  
                    u540 028B                      _ISR 0004                      u541 028A  
                    u550 029C                      u551 029B                      u560 02A4  
                    u800 022E                      u561 02A3                      u801 022D  
                    u810 023C                      u811 023B                      u820 0246  
                    u821 0245              _triggerNote 002B              ?i1_DACWrite 0070  
                    wreg 0009             _BAUD1CONbits 011F                     ?_ISR 0070  
                   l1031 0286                     l1041 0295                     l1033 028B  
                   l1201 022E                     l1043 029C                     l1035 028C  
                   l1027 0281                     l1211 0246                     l1203 0233  
                   l1037 0290                     l1029 0282                     l1213 0248  
                   l1205 0237                     l1039 0294                     l1207 023C  
                   l1151 01E6                     l1209 0240                     l1161 01F5  
                   l1153 01EB                     l1171 0203                     l1163 01F8  
                   l1155 01ED                     l1181 0210                     l1173 0206  
                   l1165 01FB                     l1157 01F1                     l1191 0216  
                   l1183 0211                     l1175 0208                     l1167 01FE  
                   l1159 01F2                     l1193 0218                     l1185 0212  
                   l1177 0209                     l1169 0201                     l1195 0219  
                   l1187 0214                     l1179 020D                     l1197 0220  
                   l1189 0215                     l1199 0229                     _LATC 001A  
                   _PEIE 005E                     _WPUA 1F39                     _main 01E6  
                   fsr0h 0005                     indf0 0000                     fsr0l 0004  
                   btemp 007E                     start 0052         __end_of_DACWrite 02A7  
                  ??_ISR 007B          __end_of_NoteOff 02DE                    ?_main 0070  
                  _RC1IE 38CD                    _RC1IF 387D                    i1l150 02C6  
                  i1l160 0278                    i1l152 02CA                    i1l136 0017  
                  i1l153 02CC                    i1l137 0050                    i1l162 027C  
                  i1l163 027E                    i1l147 02C0                    i1l139 004E  
                  i1l157 0272                    i1l191 02DD                    i1l167 016B  
                  i1l991 025D                    i1l983 024C                    i1l993 026D  
                  i1l985 024D                    i1l995 026F                    i1l987 0257  
                  i1l997 0276                    i1l989 025C                    i1l999 02CD  
                  _RCREG 0119                    u50_20 02D4                    u50_21 02D3  
                  u51_20 02B2                    u51_21 02B1                    u52_20 02C4  
                  u60_20 00A0                    u52_21 02C3                    u60_21 009F  
                  u53_20 02CA                    u61_20 00A6                    u53_21 02C9  
                  u61_21 00A5                    u45_25 0250                    u46_20 025C  
                  u70_20 00FC                    u62_20 00AC                    u46_21 025B  
                  u70_21 00FB                    u62_21 00AB                    u71_20 0107  
                  u63_20 00B2                    u71_21 0106                    u63_21 00B1  
                  u47_25 0264                    u48_20 0276                    u72_20 010D  
                  u64_20 00C6                    u48_21 0275                    u72_21 010C  
                  u64_21 00C5                    u49_20 027C                    u73_20 0131  
                  u65_20 00CC                    u57_20 0081                    u49_21 027B  
                  u73_21 0130                    u65_21 00CB                    u57_21 0080  
                  _TRISA 0012                    _TRISC 0014                    u74_20 013D  
                  u66_20 00D3                    u58_20 0086                    u74_21 013C  
                  u66_21 00D2                    u58_21 0085                    u75_20 0141  
                  u67_20 00EB                    u59_20 008C                    u83_20 000B  
                  u75_21 0140                    u67_21 00EA                    u59_21 008B  
                  u83_21 000A                    u76_20 0159                    u68_20 00F1  
                  u84_20 0016                    u76_21 0158                    u68_21 00F0  
                  u84_21 0015                    u77_20 015E                    u69_20 00F6  
                  u85_20 001B                    u77_21 015D                    u69_21 00F5  
                  u85_21 001A                    u78_20 0164                    u86_20 0028  
                  u78_21 0163                    u86_21 0027                    u79_20 016A  
                  u87_20 0040                    u79_21 0169                    u87_21 003F  
                  u88_20 0047                    u88_21 0046        __end_of_DAC8Write 027F  
        __end_of_oneVolt 02EC                    status 0003                    wtemp0 007E  
    __size_ofi1_DACWrite 0026          __initialization 0053             __end_of_main 024B  
                 ??_main 0038                   _ANSELA 1F38                   _ANSELC 1F4E  
                 _RA4PPS 1F14                   _RC1STA 011D                   i1l1001 02D4  
                 i1l1003 02D7                   i1l1011 02A9                   i1l1005 02D8  
                 i1l1021 02BB                   i1l1013 02AD                   i1l1101 00FC  
                 i1l1023 02BD                   i1l1015 02B2                   i1l1103 0101  
                 i1l1025 02C4                   i1l1017 02B3                   i1l1009 02A8  
                 i1l1121 0135                   i1l1113 0111                   i1l1019 02B7  
                 i1l1131 014C                   i1l1123 0138                   i1l1115 0124  
                 i1l1107 0108                   i1l1051 0086                   _RC4PPS 1F24  
                 i1l1141 0159                   i1l1133 014E                   i1l1125 013D  
                 i1l1117 012C                   i1l1109 010D                   i1l1053 008C  
                 i1l1061 009A                   i1l1045 0070                   i1l1221 001B  
                 i1l1143 015E                   i1l1127 0141                   i1l1119 0131  
                 i1l1071 00B9                   i1l1063 00A0                   i1l1055 0090  
                 i1l1047 007B                   i1l1231 0038                   i1l1223 0020  
                 i1l1215 0006                   i1l1145 0164                   i1l1129 0144  
                 i1l1081 00CD                   i1l1073 00C0                   i1l1065 00A6  
                 i1l1057 0099                   i1l1049 0081                   i1l1241 0041  
                 i1l1225 0022                   i1l1217 000B                   i1l1139 0153  
                 i1l1083 00D3                   i1l1075 00C6                   i1l1067 00AC  
                 i1l1243 0047                   i1l1227 0028                   _RC5PPS 1F25  
                 i1l1085 00D7                   i1l1069 00B2                   i1l1093 00E5  
                 i1l1245 004B                   i1l1229 002C                   i1l1237 003B  
                 i1l1095 00EB                   i1l1087 00DF                   i1l1097 00F1  
                 i1l1099 00F6                   _SP1BRG 011B                   _OSCFRQ 0893  
                 _VCODAC 016C                   _TX1STA 011E               _LowestNote 003B  
              ??_NoteOff 0076              _HighestNote 003A                   _midiCh 0039  
                 _midi_a 002F                   _midi_b 002E                   _modLvl 0027  
                 _status 002D            _runningStatus 0031                ?_DACWrite 0032  
           DAC8Write@dac 0073  __end_of__initialization 006C           __pcstackCOMMON 0070  
           __pidataBANK0 02DE       handleMIDI@midiByte 007A             ??i1_DACWrite 0072  
             ??_DACWrite 0034               __pbssBANK0 0020               __pmaintext 01E6  
     __end_ofi1_DACWrite 02CD            i1DACWrite@dac 0073               _handleMIDI 006F  
             __pintentry 0004                  _OSCCON1 088D                  _SSP1BUF 018C  
              _DAC8Write 024B           DACWrite@dacLSB 0036           DACWrite@dacMSB 0037  
                _NoteOff 02CD                  _bendLvl 0022                  _channel 002C  
                __ptext1 027F                  __ptext3 006F                  __ptext4 02A7  
                __ptext5 02CD                  __ptext6 024B             __size_of_ISR 004E  
                _envtrig 003D                  _oneVolt 02EA                  clrloop0 02E5  
   end_of_initialization 006C               ?_DAC8Write 0070              ?_handleMIDI 0076  
          DAC8Write@data 0070        __size_of_DACWrite 0028           __end_of_VCODAC 01E6  
    start_initialization 0053              __end_of_ISR 0052      __size_of_handleMIDI 00FD  
            ??_DAC8Write 0071             DACWrite@data 0032              __pdataBANK0 0039  
            __pbssCOMMON 007D                ___latbits 0000            __pcstackBANK0 0032  
               ?_NoteOff 0070           i1DACWrite@data 0070         i1DACWrite@dacLSB 0074  
       i1DACWrite@dacMSB 0075                 _DACWrite 027F                clear_ram0 02E4  
              _pitchBend 0024                 _RX1DTPPS 1ECB                _thirdByte 0030  
               _SSP1CON1 0190             ??_handleMIDI 0078                _trigcount 0029  
     __end_of_handleMIDI 016C              DACWrite@dac 0035         __size_of_NoteOff 0011  
       handleMIDI@midi_a 0076         handleMIDI@midi_b 0077                 _auxLevel 0026  
               _lastBend 003C                 _midiByte 007D                 _lastNote 002A  
          __size_of_main 0065                 _tempBend 0020                 int$flags 007E  
               _trigenab 0028                 _trigtime 003E             _SSP1STATbits 018F  
             i1_DACWrite 02A7                 intlevel1 0000          DAC8Write@dacLSB 0074  
        DAC8Write@dacMSB 0075            __pstringtext1 016C            __pstringtext2 02EA  
             _SSP1DATPPS 1EC6       __size_of_DAC8Write 0034  
